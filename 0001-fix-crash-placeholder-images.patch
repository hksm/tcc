From 3036a489e98a8e54f5b16141cdf985b929f23621 Mon Sep 17 00:00:00 2001
From: Marcos Henkes <marcoshenkes@gmail.com>
Date: Sun, 28 May 2017 22:22:21 -0300
Subject: [PATCH 1/1] fix crash & placeholder images

---
 copie.bat                                          |    1 +
 .../java/io/github/hksm/business/FoodBusiness.java |   19 +-
 .../github/hksm/controller/ReplaceController.java  |   17 +-
 src/main/resources/static/app/app.config.js        |    9 +-
 src/main/resources/static/app/app.js               |    2 +-
 .../static/app/food/food-form.controller.js        |   26 +-
 src/main/resources/static/app/food/food-form.html  |   39 +-
 src/main/resources/static/app/profile/profile.html |   44 +-
 .../resources/static/app/search/replace-list.html  |    6 +-
 .../resources/static/app/search/search-list.html   |    3 +-
 src/main/resources/static/app/sidenav/sidenav.html |    3 +-
 src/main/resources/static/css/styles.css           |    9 +-
 src/main/resources/static/img/food-placeholder.jpg |  Bin 0 -> 139232 bytes
 src/main/resources/static/index.html               |    7 +-
 .../resources/static/lib/ng-file-upload-shim.js    |  421 ++++
 src/main/resources/static/lib/ng-file-upload.js    | 2476 ++++++++++++++++++++
 src/main/resources/static/lib/ng-img-crop.css      |   18 +
 src/main/resources/static/lib/ng-img-crop.js       | 1879 +++++++++++++++
 src/main/resources/static/package.json             |    3 +
 19 files changed, 4933 insertions(+), 49 deletions(-)
 create mode 100644 copie.bat
 create mode 100644 src/main/resources/static/img/food-placeholder.jpg
 create mode 100644 src/main/resources/static/lib/ng-file-upload-shim.js
 create mode 100644 src/main/resources/static/lib/ng-file-upload.js
 create mode 100644 src/main/resources/static/lib/ng-img-crop.css
 create mode 100644 src/main/resources/static/lib/ng-img-crop.js

diff --git a/copie.bat b/copie.bat
new file mode 100644
index 0000000..0bfe82e
--- /dev/null
+++ b/copie.bat
@@ -0,0 +1 @@
+robocopy /mir src\main\resources\static target\classes\static
diff --git a/src/main/java/io/github/hksm/business/FoodBusiness.java b/src/main/java/io/github/hksm/business/FoodBusiness.java
index e153670..b20cf4b 100644
--- a/src/main/java/io/github/hksm/business/FoodBusiness.java
+++ b/src/main/java/io/github/hksm/business/FoodBusiness.java
@@ -6,7 +6,6 @@ import io.github.hksm.entity.Profile;
 import io.github.hksm.entity.QProfile;
 import io.github.hksm.entity.Substance;
 import io.github.hksm.repository.ProfileRepository;
-import io.github.hksm.util.AuthUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
@@ -24,15 +23,19 @@ public class FoodBusiness {
 
     public AlergenicInfo getAlergenicInfo(Food food, String username) {
         Profile profile = profileRepository.findOne(QProfile.profile.userData.username.eq(username));
-        Set<Long> foodSet = profile.getFood().stream().map(Food::getId).collect(Collectors.toSet());
-        Set<Long> subsSet = profile.getSubstance().stream().map(Substance::getId).collect(Collectors.toSet());
 
-        if (foodSet.stream().anyMatch(id -> id.equals(food.getId()) || food.getRelatedFood().stream().map(Food::getId).anyMatch(i -> i.equals(id)))) {
-            return AlergenicInfo.DANGER;
-        }
-        if (subsSet.stream().anyMatch(id -> food.getContainedSubstances().stream().map(Substance::getId).anyMatch(i -> i.equals(id)))) {
-            return AlergenicInfo.DANGER;
+        if (profile != null) {
+            Set<Long> foodSet = profile.getFood().stream().map(Food::getId).collect(Collectors.toSet());
+            Set<Long> subsSet = profile.getSubstance().stream().map(Substance::getId).collect(Collectors.toSet());
+
+            if (foodSet.stream().anyMatch(id -> id.equals(food.getId()) || food.getRelatedFood().stream().map(Food::getId).anyMatch(i -> i.equals(id)))) {
+                return AlergenicInfo.DANGER;
+            }
+            if (subsSet.stream().anyMatch(id -> food.getContainedSubstances().stream().map(Substance::getId).anyMatch(i -> i.equals(id)))) {
+                return AlergenicInfo.DANGER;
+            }
         }
+
         if (food.isAlergenic() || food.getRelatedFood().stream().anyMatch(Food::isAlergenic)
                 || food.getContainedSubstances().stream().anyMatch(Substance::isAlergenic)) {
             return AlergenicInfo.WARNING;
diff --git a/src/main/java/io/github/hksm/controller/ReplaceController.java b/src/main/java/io/github/hksm/controller/ReplaceController.java
index 675ccb9..25393da 100644
--- a/src/main/java/io/github/hksm/controller/ReplaceController.java
+++ b/src/main/java/io/github/hksm/controller/ReplaceController.java
@@ -46,10 +46,19 @@ public class ReplaceController {
         }
         String username = AuthUtils.getLoggedUsername(request.getHeader("Authorization").substring(7));
         Profile profile = profileRepository.findOne(QProfile.profile.userData.username.eq(username));
-        Set<Long> foodSet = profile.getFood().stream().map(Food::getId).collect(Collectors.toSet());
-        foodSet.add(0L);
-        Set<Long> subsSet = profile.getSubstance().stream().map(Substance::getId).collect(Collectors.toSet());
-        subsSet.add(0L);
+
+        Set<Long> foodSet;
+        Set<Long> subsSet;
+
+        if (profile != null) {
+            foodSet = profile.getFood().stream().map(Food::getId).collect(Collectors.toSet());
+            foodSet.add(0L);
+            subsSet = profile.getSubstance().stream().map(Substance::getId).collect(Collectors.toSet());
+            subsSet.add(0L);
+        } else {
+            foodSet = Collections.singleton(0L);
+            subsSet = Collections.singleton(0L);
+        }
 
         for (int i = 5; i <= 15; i += 5) {
             List<Pair<Food, BigDecimal>> list = getReplacementList(food, QFood.food.id.notIn(foodSet).and(
diff --git a/src/main/resources/static/app/app.config.js b/src/main/resources/static/app/app.config.js
index f25faa0..916c99c 100644
--- a/src/main/resources/static/app/app.config.js
+++ b/src/main/resources/static/app/app.config.js
@@ -2,7 +2,7 @@
 
 	'use strict';
 
-	angular.module('tcc').config(function($routeProvider, $locationProvider, $mdThemingProvider, $mdIconProvider, flowFactoryProvider) {
+	angular.module('tcc').config(function($routeProvider, $locationProvider, $mdThemingProvider, $mdIconProvider) {
 
 		$routeProvider
 			.when('/', {
@@ -98,13 +98,6 @@
 				.accentPalette('deep-purple');
 
 			$mdIconProvider.defaultIconSet('img/icons/mdi.svg');
-
-			flowFactoryProvider.defaults = {
-				target: '/api/images',
-				singleFile: true,
-				testChunks: false
-			};
-
 	});
 	
 })();
\ No newline at end of file
diff --git a/src/main/resources/static/app/app.js b/src/main/resources/static/app/app.js
index 2bad115..735e124 100644
--- a/src/main/resources/static/app/app.js
+++ b/src/main/resources/static/app/app.js
@@ -2,6 +2,6 @@
 
 	'use strict';
 
-	angular.module('tcc', ['ngMaterial', 'ngRoute', 'ngMessages', 'ngSanitize', 'ngCookies', 'ngMdIcons', 'md.data.table', 'Focus.Service', 'flow']);
+	angular.module('tcc', ['ngMaterial', 'ngRoute', 'ngMessages', 'ngSanitize', 'ngCookies', 'ngMdIcons', 'md.data.table', 'Focus.Service', 'ngFileUpload', 'ngImgCrop', 'ngLetterAvatar']);
 
 })();
\ No newline at end of file
diff --git a/src/main/resources/static/app/food/food-form.controller.js b/src/main/resources/static/app/food/food-form.controller.js
index d05fc83..1eeebd8 100644
--- a/src/main/resources/static/app/food/food-form.controller.js
+++ b/src/main/resources/static/app/food/food-form.controller.js
@@ -6,8 +6,26 @@
 
 	Controller.$inject = ['FoodService', 'SubstanceService', 'EnumsService', '$mdDialog', '$mdToast', '$mdPanel', '$q', '$location', '$focus', 'foodRequest'];
 
-	function Controller(FoodService, SubstanceService, EnumsService, $mdDialog, $mdToast, $mdPanel, $q, $location, $focus, foodRequest) {
+	function Controller(FoodService, SubstanceService, EnumsService, $mdDialog, $mdToast, $mdPanel, $q, $location, $focus, foodRequest, $scope) {
 		var vm = this;
+    
+    vm.upload = function(dataUrl, name) {
+      Upload.upload({
+        url: '/api/images',
+        data: {
+            file: Upload.dataUrltoBlob(dataUrl, name)
+        },
+      }).then(function(response) {
+        $timeout(function() {
+          $scope.result = response.data;
+        });
+      }, function (response) {
+        if (response.status > 0) $scope.errorMsg = response.status 
+            + ': ' + response.data;
+      }, function (evt) {
+        $scope.progress = parseInt(100.0 * evt.loaded / evt.total);
+      });
+    }
 		
 		vm.transformTag = transformTag;
 		vm.save = save;
@@ -53,10 +71,10 @@
 			return { description: chip };
 		}
 
-		function save(food, form, flow, remain) {
-			flow.upload().then(function(resp) {
+		function save(food, form, _, remain) {
+			/*flow.upload().then(function(resp) {
 				console.log(resp);
-			});
+			});*/
 			return FoodService.save(food).then(function(response) {
 				if (response.status === 200 || response.status === 204) {
 					$mdToast.show($mdToast.simple().textContent("Alimento salvo com sucesso").position('top right'));
diff --git a/src/main/resources/static/app/food/food-form.html b/src/main/resources/static/app/food/food-form.html
index d48e3e7..b3588ec 100644
--- a/src/main/resources/static/app/food/food-form.html
+++ b/src/main/resources/static/app/food/food-form.html
@@ -1,6 +1,6 @@
 <md-content layout-padding>
     <md-card>
-        <form name="foodForm" flow-init>
+        <form name="foodForm">
             <md-card-title>
                 <md-card-title-text>
                     <span class="md-headline">{{vm.food.id ? 'Editando alimento' : 'Cadastro de alimentos'}}</span>
@@ -9,23 +9,38 @@
             
             <md-card-content>
 
-                 <div flex="100" layout="row" layout-padding> 
+                <div layout="row" layout-padding>
                     <div
                         class="border-transition border-invisible-2px"
                         style="text-align: center;"
                         flex="30"
                         layout="column"
                         layout-align="center center"
-                        flow-drop
-                        flow-drag-enter="style={border:'2px solid #0f0'}"
-                        flow-drag-leave="style={border:'2px solid #fff'}">
- 
-                        <img ng-if="!$flow.files.length" ng-src="http://placehold.it/450x450">
-                        <img ng-if="$flow.files.length" flow-img="$flow.files[0]">
- 
-                        <span ng-if="!$flow.files.length">Arraste um arquivo para definir como imagem</span>
-                    </div>
+                        ng-style="style">
 
+                        <!--<img ng-if="!$flow.files.length" ng-src="http://placehold.it/150x150">
+                        <img ng-if="$flow.files.length" flow-img="$flow.files[0]">-->
+                        
+                        <div ngf-drop ng-model="picFile" ngf-pattern="image/*"
+                             class="cropArea">
+                            <img-crop image="picFile  | ngfDataUrl"                 
+                            result-image="croppedDataUrl" ng-init="croppedDataUrl=''">
+                            </img-crop>
+                        </div>
+                        
+                        <!--<button ng-click="upload(croppedDataUrl, picFile.name)">Submit</button>
+                        
+                        <span class="progress" ng-show="progress >= 0">
+                          <div style="width:{{progress}}%" ng-bind="progress + '%'"></div>
+                        </span>
+                        <span ng-show="result">Upload Successful</span>
+                        <span class="err" ng-show="errorMsg">{{errorMsg}}</span>-->
+            
+                        <md-button style="margin-top: 10px;" ngf-select ng-model="picFile" accept="image/*">Selecionar imagem</md-button>
+                        <md-button style="margin-top: 10px;" ng-click="vm.upload(croppedDataUrl, picFile.name);">u</md-button>
+
+                    </div>
+                    
                     <div flex>
                         <div layout-gt-sm="row">
                             <md-input-container class="md-block" flex-gt-sm>
@@ -120,7 +135,7 @@
             </md-card-content>
             
             <md-card-actions layout="row" layout-align="end center">
-                <md-button class="md-raised md-primary" ng-click="vm.save(vm.food, foodForm, $flow)" ng-disabled="foodForm.$invalid">Salvar</md-button>
+                <md-button class="md-raised md-primary" ng-click="vm.save(vm.food, foodForm, null)" ng-disabled="foodForm.$invalid">Salvar</md-button>
                 <md-button class="md-raised" ng-click="vm.save(vm.food, foodForm, true)" ng-disabled="foodForm.$invalid">Salvar e adicionar outro</md-button>
                 <md-button class="md-raised" ng-click="vm.cleanForm(foodForm)">Limpar</md-button>
             </md-card-actions>
diff --git a/src/main/resources/static/app/profile/profile.html b/src/main/resources/static/app/profile/profile.html
index 16a84d6..ffcb937 100644
--- a/src/main/resources/static/app/profile/profile.html
+++ b/src/main/resources/static/app/profile/profile.html
@@ -8,11 +8,45 @@
             </md-card-title>
             
             <md-card-content>
-                <div layout-gt-sm="row">
-                    <md-input-container class="md-block" flex-gt-sm>
-                        <label>Nome completo</label>
-                        <input id="nameInput" ng-model="vm.profile.fullName" ng-required="true">
-                    </md-input-container>
+            
+                <div layout="row" layout-padding>
+                    <div
+                        class="border-transition border-invisible-2px"
+                        style="text-align: center;"
+                        flex="30"
+                        layout="column"
+                        layout-align="center center"
+                        ng-style="style">
+
+                        <!--<img ng-if="!$flow.files.length" ng-src="http://placehold.it/150x150">
+                        <img ng-if="$flow.files.length" flow-img="$flow.files[0]">-->
+                        
+                        <div ngf-drop ng-model="picFile" ngf-pattern="image/*"
+                             class="cropArea">
+                            <img-crop image="picFile  | ngfDataUrl"                 
+                            result-image="croppedDataUrl" ng-init="croppedDataUrl=''">
+                            </img-crop>
+                        </div>
+                        
+                        <!--<button ng-click="upload(croppedDataUrl, picFile.name)">Submit</button>
+                        
+                        <span class="progress" ng-show="progress >= 0">
+                          <div style="width:{{progress}}%" ng-bind="progress + '%'"></div>
+                        </span>
+                        <span ng-show="result">Upload Successful</span>
+                        <span class="err" ng-show="errorMsg">{{errorMsg}}</span>-->
+            
+                        <md-button style="margin-top: 10px;" ngf-select ng-model="picFile" accept="image/*">Selecionar imagem</md-button>
+                        <md-button style="margin-top: 10px;" ng-click="vm.upload(croppedDataUrl, picFile.name);">u</md-button>
+
+                    </div>
+                    
+                    <div layout-gt-sm="row">
+                        <md-input-container class="md-block" flex-gt-sm>
+                            <label>Nome completo</label>
+                            <input id="nameInput" ng-model="vm.profile.fullName" ng-required="true">
+                        </md-input-container>
+                    </div>
                 </div>
 
                 <h2 class="md-title">Alergias alimentares</h2>
diff --git a/src/main/resources/static/app/search/replace-list.html b/src/main/resources/static/app/search/replace-list.html
index 9c6034e..8e09c07 100644
--- a/src/main/resources/static/app/search/replace-list.html
+++ b/src/main/resources/static/app/search/replace-list.html
@@ -2,7 +2,8 @@
     <md-card>
         <md-list flex>
             <md-list-item class="md-3-line">
-                <img ng-src="http://placehold.it/40x40" class="md-avatar" alt="Imagem do alimento">
+                <!--<img ng-src="http://placehold.it/40x40" class="md-avatar" alt="Imagem do alimento">-->
+                <span style="margin-right: 10px;"><ng-letter-avatar class="md-avatar" shape="round" data="{{ vm.mainFood.name }}"></ng-letter-avatar></span>
                 <div class="md-list-item-text" layout="column">
                     <h3 class="list-line-1-height-fix">
                         <strong>
@@ -68,7 +69,8 @@
     <md-card ng-repeat="item in vm.results">
         <md-list flex ng-class="{'red-strip': item.third === 'DANGER', 'orange-strip': item.third === 'WARNING', 'green-strip': item.third === 'SAFE'}">
             <md-list-item class="md-3-line">
-                <img ng-src="http://placehold.it/40x40" class="md-avatar" alt="Imagem do alimento">
+                <!--<img ng-src="http://placehold.it/40x40" class="md-avatar" alt="Imagem do alimento">-->
+                <span style="margin-right: 10px;"><ng-letter-avatar class="md-avatar" style="margin-right: 10px;" shape="round" data="{{ item.first.name }}"></ng-letter-avatar></span>
                 <div class="md-list-item-text" layout="column">
                     <h3 class="list-line-1-height-fix">
                         <strong>
diff --git a/src/main/resources/static/app/search/search-list.html b/src/main/resources/static/app/search/search-list.html
index d12e674..34db105 100644
--- a/src/main/resources/static/app/search/search-list.html
+++ b/src/main/resources/static/app/search/search-list.html
@@ -7,7 +7,8 @@
     <md-card ng-repeat="item in vm.results">
         <md-list flex ng-class="{'red-strip': item.second === 'DANGER', 'orange-strip': item.second === 'WARNING', 'green-strip': item.second === 'SAFE'}">
             <md-list-item class="md-3-line">
-                <img ng-src="http://placehold.it/40x40" class="md-avatar" alt="Imagem do alimento">
+                <!--<img ng-src="http://placehold.it/40x40" class="md-avatar" alt="Imagem do alimento">-->
+                <span style="margin-right: 10px;"><ng-letter-avatar class="md-avatar" style="margin-right: 10px;" shape="round" data="{{ item.first.name }}"></ng-letter-avatar></span>
                 <div class="md-list-item-text" layout="column">
                     <h3 class="list-line-1-height-fix">
                         <strong>
diff --git a/src/main/resources/static/app/sidenav/sidenav.html b/src/main/resources/static/app/sidenav/sidenav.html
index 2c4bee7..3fdfc29 100644
--- a/src/main/resources/static/app/sidenav/sidenav.html
+++ b/src/main/resources/static/app/sidenav/sidenav.html
@@ -9,7 +9,8 @@
     <md-toolbar class="md-whiteframe-z2 sidebar-holder">
         <div class="sidebar-header header-cover" style="background-image: url(/img/sidenav-background.jpg);">
 	        <div class="sidebar-image">
-	            <img ng-src="/img/avatar-placeholder.png" class="md-avatar" alt="Imagem do perfil">
+                <ng-letter-avatar class="md-avatar" style="margin-right: 10px;" shape="round" data="{{user.username}}"></ng-letter-avatar>
+	            <!--<img ng-src="/img/avatar-placeholder.png" class="md-avatar" alt="Imagem do perfil">-->
 	        </div>
 	        <a class="sidebar-brand" href="#foobar">
 	            {{user.username}}
diff --git a/src/main/resources/static/css/styles.css b/src/main/resources/static/css/styles.css
index 8896c6b..ecdfe55 100644
--- a/src/main/resources/static/css/styles.css
+++ b/src/main/resources/static/css/styles.css
@@ -428,4 +428,11 @@ md-toolbar .sidebar-brand {
 .bell-notif-3:before { content: '3'; }
 .bell-notif-4:before { content: '4'; }
 .bell-notif-5:before { content: '5'; }
-.bell-notif-5p:before { content: '5+'; }
\ No newline at end of file
+.bell-notif-5p:before { content: '5+'; }
+
+.cropArea {
+    background: #E4E4E4;
+    overflow: hidden;
+    width:500px;
+    height:350px;
+}
diff --git a/src/main/resources/static/img/food-placeholder.jpg b/src/main/resources/static/img/food-placeholder.jpg
new file mode 100644
index 0000000000000000000000000000000000000000..a578979fba7f08eda84ccc4e9daa148293347d4c
GIT binary patch
literal 139232
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

literal 0
HcmV?d00001

diff --git a/src/main/resources/static/index.html b/src/main/resources/static/index.html
index 67c41c5..a1d59a9 100644
--- a/src/main/resources/static/index.html
+++ b/src/main/resources/static/index.html
@@ -10,6 +10,7 @@
     <link rel="stylesheet" href="/node_modules/roboto-fontface/css/roboto/roboto-fontface.css">
     <link rel="stylesheet" href="/node_modules/angular-material/angular-material.css">
     <link rel="stylesheet" href="/node_modules/angular-material-data-table/dist/md-data-table.css">
+    <link rel="stylesheet" href="/lib/ng-img-crop.css">
     <link rel="stylesheet" href="/css/styles.css">
 </head>
 
@@ -172,8 +173,10 @@
     <script src="/node_modules/angular-material-icons/angular-material-icons.js"></script>
     <script src="/node_modules/angular-material-data-table/dist/md-data-table.js"></script>
     <script src="/node_modules/meanie-angular-focus/release/meanie-angular-focus.js"></script>
-    <script src="/node_modules/@flowjs/flow.js/dist/flow.js"></script>
-    <script src="/node_modules/@flowjs/ng-flow/dist/ng-flow.js"></script>
+    <script src="/lib/ng-file-upload.js"></script>
+    <script src="/lib/ng-file-upload-shim.js"></script>
+    <script src="/lib/ng-img-crop.js"></script>
+    <script src="/node_modules/ngletteravatar/dist/ngletteravatar.min.js"></script>
 
     <script src="/app/app.js"></script>
     <script src="/app/app.constants.js"></script>
diff --git a/src/main/resources/static/lib/ng-file-upload-shim.js b/src/main/resources/static/lib/ng-file-upload-shim.js
new file mode 100644
index 0000000..f1d033a
--- /dev/null
+++ b/src/main/resources/static/lib/ng-file-upload-shim.js
@@ -0,0 +1,421 @@
+/**!
+ * AngularJS file upload directives and services. Supports: file upload/drop/paste, resume, cancel/abort,
+ * progress, resize, thumbnail, preview, validation and CORS
+ * FileAPI Flash shim for old browsers not supporting FormData
+ * @author  Danial  <danial.farid@gmail.com>
+ * @version 12.2.13
+ */
+
+(function () {
+  /** @namespace FileAPI.noContentTimeout */
+
+  function patchXHR(fnName, newFn) {
+    window.XMLHttpRequest.prototype[fnName] = newFn(window.XMLHttpRequest.prototype[fnName]);
+  }
+
+  function redefineProp(xhr, prop, fn) {
+    try {
+      Object.defineProperty(xhr, prop, {get: fn});
+    } catch (e) {/*ignore*/
+    }
+  }
+
+  if (!window.FileAPI) {
+    window.FileAPI = {};
+  }
+
+  if (!window.XMLHttpRequest) {
+    throw 'AJAX is not supported. XMLHttpRequest is not defined.';
+  }
+
+  FileAPI.shouldLoad = !window.FormData || FileAPI.forceLoad;
+  if (FileAPI.shouldLoad) {
+    var initializeUploadListener = function (xhr) {
+      if (!xhr.__listeners) {
+        if (!xhr.upload) xhr.upload = {};
+        xhr.__listeners = [];
+        var origAddEventListener = xhr.upload.addEventListener;
+        xhr.upload.addEventListener = function (t, fn) {
+          xhr.__listeners[t] = fn;
+          if (origAddEventListener) origAddEventListener.apply(this, arguments);
+        };
+      }
+    };
+
+    patchXHR('open', function (orig) {
+      return function (m, url, b) {
+        initializeUploadListener(this);
+        this.__url = url;
+        try {
+          orig.apply(this, [m, url, b]);
+        } catch (e) {
+          if (e.message.indexOf('Access is denied') > -1) {
+            this.__origError = e;
+            orig.apply(this, [m, '_fix_for_ie_crossdomain__', b]);
+          }
+        }
+      };
+    });
+
+    patchXHR('getResponseHeader', function (orig) {
+      return function (h) {
+        return this.__fileApiXHR && this.__fileApiXHR.getResponseHeader ? this.__fileApiXHR.getResponseHeader(h) : (orig == null ? null : orig.apply(this, [h]));
+      };
+    });
+
+    patchXHR('getAllResponseHeaders', function (orig) {
+      return function () {
+        return this.__fileApiXHR && this.__fileApiXHR.getAllResponseHeaders ? this.__fileApiXHR.getAllResponseHeaders() : (orig == null ? null : orig.apply(this));
+      };
+    });
+
+    patchXHR('abort', function (orig) {
+      return function () {
+        return this.__fileApiXHR && this.__fileApiXHR.abort ? this.__fileApiXHR.abort() : (orig == null ? null : orig.apply(this));
+      };
+    });
+
+    patchXHR('setRequestHeader', function (orig) {
+      return function (header, value) {
+        if (header === '__setXHR_') {
+          initializeUploadListener(this);
+          var val = value(this);
+          // fix for angular < 1.2.0
+          if (val instanceof Function) {
+            val(this);
+          }
+        } else {
+          this.__requestHeaders = this.__requestHeaders || {};
+          this.__requestHeaders[header] = value;
+          orig.apply(this, arguments);
+        }
+      };
+    });
+
+    patchXHR('send', function (orig) {
+      return function () {
+        var xhr = this;
+        if (arguments[0] && arguments[0].__isFileAPIShim) {
+          var formData = arguments[0];
+          var config = {
+            url: xhr.__url,
+            jsonp: false, //removes the callback form param
+            cache: true, //removes the ?fileapiXXX in the url
+            complete: function (err, fileApiXHR) {
+              if (err && angular.isString(err) && err.indexOf('#2174') !== -1) {
+                // this error seems to be fine the file is being uploaded properly.
+                err = null;
+              }
+              xhr.__completed = true;
+              if (!err && xhr.__listeners.load)
+                xhr.__listeners.load({
+                  type: 'load',
+                  loaded: xhr.__loaded,
+                  total: xhr.__total,
+                  target: xhr,
+                  lengthComputable: true
+                });
+              if (!err && xhr.__listeners.loadend)
+                xhr.__listeners.loadend({
+                  type: 'loadend',
+                  loaded: xhr.__loaded,
+                  total: xhr.__total,
+                  target: xhr,
+                  lengthComputable: true
+                });
+              if (err === 'abort' && xhr.__listeners.abort)
+                xhr.__listeners.abort({
+                  type: 'abort',
+                  loaded: xhr.__loaded,
+                  total: xhr.__total,
+                  target: xhr,
+                  lengthComputable: true
+                });
+              if (fileApiXHR.status !== undefined) redefineProp(xhr, 'status', function () {
+                return (fileApiXHR.status === 0 && err && err !== 'abort') ? 500 : fileApiXHR.status;
+              });
+              if (fileApiXHR.statusText !== undefined) redefineProp(xhr, 'statusText', function () {
+                return fileApiXHR.statusText;
+              });
+              redefineProp(xhr, 'readyState', function () {
+                return 4;
+              });
+              if (fileApiXHR.response !== undefined) redefineProp(xhr, 'response', function () {
+                return fileApiXHR.response;
+              });
+              var resp = fileApiXHR.responseText || (err && fileApiXHR.status === 0 && err !== 'abort' ? err : undefined);
+              redefineProp(xhr, 'responseText', function () {
+                return resp;
+              });
+              redefineProp(xhr, 'response', function () {
+                return resp;
+              });
+              if (err) redefineProp(xhr, 'err', function () {
+                return err;
+              });
+              xhr.__fileApiXHR = fileApiXHR;
+              if (xhr.onreadystatechange) xhr.onreadystatechange();
+              if (xhr.onload) xhr.onload();
+            },
+            progress: function (e) {
+              e.target = xhr;
+              if (xhr.__listeners.progress) xhr.__listeners.progress(e);
+              xhr.__total = e.total;
+              xhr.__loaded = e.loaded;
+              if (e.total === e.loaded) {
+                // fix flash issue that doesn't call complete if there is no response text from the server
+                var _this = this;
+                setTimeout(function () {
+                  if (!xhr.__completed) {
+                    xhr.getAllResponseHeaders = function () {
+                    };
+                    _this.complete(null, {status: 204, statusText: 'No Content'});
+                  }
+                }, FileAPI.noContentTimeout || 10000);
+              }
+            },
+            headers: xhr.__requestHeaders
+          };
+          config.data = {};
+          config.files = {};
+          for (var i = 0; i < formData.data.length; i++) {
+            var item = formData.data[i];
+            if (item.val != null && item.val.name != null && item.val.size != null && item.val.type != null) {
+              config.files[item.key] = item.val;
+            } else {
+              config.data[item.key] = item.val;
+            }
+          }
+
+          setTimeout(function () {
+            if (!FileAPI.hasFlash) {
+              throw 'Adode Flash Player need to be installed. To check ahead use "FileAPI.hasFlash"';
+            }
+            xhr.__fileApiXHR = FileAPI.upload(config);
+          }, 1);
+        } else {
+          if (this.__origError) {
+            throw this.__origError;
+          }
+          orig.apply(xhr, arguments);
+        }
+      };
+    });
+    window.XMLHttpRequest.__isFileAPIShim = true;
+    window.FormData = FormData = function () {
+      return {
+        append: function (key, val, name) {
+          if (val.__isFileAPIBlobShim) {
+            val = val.data[0];
+          }
+          this.data.push({
+            key: key,
+            val: val,
+            name: name
+          });
+        },
+        data: [],
+        __isFileAPIShim: true
+      };
+    };
+
+    window.Blob = Blob = function (b) {
+      return {
+        data: b,
+        __isFileAPIBlobShim: true
+      };
+    };
+  }
+
+})();
+
+(function () {
+  /** @namespace FileAPI.forceLoad */
+  /** @namespace window.FileAPI.jsUrl */
+  /** @namespace window.FileAPI.jsPath */
+
+  function isInputTypeFile(elem) {
+    return elem[0].tagName.toLowerCase() === 'input' && elem.attr('type') && elem.attr('type').toLowerCase() === 'file';
+  }
+
+  function hasFlash() {
+    try {
+      var fo = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
+      if (fo) return true;
+    } catch (e) {
+      if (navigator.mimeTypes['application/x-shockwave-flash'] !== undefined) return true;
+    }
+    return false;
+  }
+
+  function getOffset(obj) {
+    var left = 0, top = 0;
+
+    if (window.jQuery) {
+      return jQuery(obj).offset();
+    }
+
+    if (obj.offsetParent) {
+      do {
+        left += (obj.offsetLeft - obj.scrollLeft);
+        top += (obj.offsetTop - obj.scrollTop);
+        obj = obj.offsetParent;
+      } while (obj);
+    }
+    return {
+      left: left,
+      top: top
+    };
+  }
+
+  if (FileAPI.shouldLoad) {
+    FileAPI.hasFlash = hasFlash();
+
+    //load FileAPI
+    if (FileAPI.forceLoad) {
+      FileAPI.html5 = false;
+    }
+
+    if (!FileAPI.upload) {
+      var jsUrl, basePath, script = document.createElement('script'), allScripts = document.getElementsByTagName('script'), i, index, src;
+      if (window.FileAPI.jsUrl) {
+        jsUrl = window.FileAPI.jsUrl;
+      } else if (window.FileAPI.jsPath) {
+        basePath = window.FileAPI.jsPath;
+      } else {
+        for (i = 0; i < allScripts.length; i++) {
+          src = allScripts[i].src;
+          index = src.search(/\/ng\-file\-upload[\-a-zA-z0-9\.]*\.js/);
+          if (index > -1) {
+            basePath = src.substring(0, index + 1);
+            break;
+          }
+        }
+      }
+
+      if (FileAPI.staticPath == null) FileAPI.staticPath = basePath;
+      script.setAttribute('src', jsUrl || basePath + 'FileAPI.min.js');
+      document.getElementsByTagName('head')[0].appendChild(script);
+    }
+
+    FileAPI.ngfFixIE = function (elem, fileElem, changeFn) {
+      if (!hasFlash()) {
+        throw 'Adode Flash Player need to be installed. To check ahead use "FileAPI.hasFlash"';
+      }
+      var fixInputStyle = function () {
+        var label = fileElem.parent();
+        if (elem.attr('disabled')) {
+          if (label) label.removeClass('js-fileapi-wrapper');
+        } else {
+          if (!fileElem.attr('__ngf_flash_')) {
+            fileElem.unbind('change');
+            fileElem.unbind('click');
+            fileElem.bind('change', function (evt) {
+              fileApiChangeFn.apply(this, [evt]);
+              changeFn.apply(this, [evt]);
+            });
+            fileElem.attr('__ngf_flash_', 'true');
+          }
+          label.addClass('js-fileapi-wrapper');
+          if (!isInputTypeFile(elem)) {
+            label.css('position', 'absolute')
+              .css('top', getOffset(elem[0]).top + 'px').css('left', getOffset(elem[0]).left + 'px')
+              .css('width', elem[0].offsetWidth + 'px').css('height', elem[0].offsetHeight + 'px')
+              .css('filter', 'alpha(opacity=0)').css('display', elem.css('display'))
+              .css('overflow', 'hidden').css('z-index', '900000')
+              .css('visibility', 'visible');
+            fileElem.css('width', elem[0].offsetWidth + 'px').css('height', elem[0].offsetHeight + 'px')
+              .css('position', 'absolute').css('top', '0px').css('left', '0px');
+          }
+        }
+      };
+
+      elem.bind('mouseenter', fixInputStyle);
+
+      var fileApiChangeFn = function (evt) {
+        var files = FileAPI.getFiles(evt);
+        //just a double check for #233
+        for (var i = 0; i < files.length; i++) {
+          if (files[i].size === undefined) files[i].size = 0;
+          if (files[i].name === undefined) files[i].name = 'file';
+          if (files[i].type === undefined) files[i].type = 'undefined';
+        }
+        if (!evt.target) {
+          evt.target = {};
+        }
+        evt.target.files = files;
+        // if evt.target.files is not writable use helper field
+        if (evt.target.files !== files) {
+          evt.__files_ = files;
+        }
+        (evt.__files_ || evt.target.files).item = function (i) {
+          return (evt.__files_ || evt.target.files)[i] || null;
+        };
+      };
+    };
+
+    FileAPI.disableFileInput = function (elem, disable) {
+      if (disable) {
+        elem.removeClass('js-fileapi-wrapper');
+      } else {
+        elem.addClass('js-fileapi-wrapper');
+      }
+    };
+  }
+})();
+
+if (!window.FileReader) {
+  window.FileReader = function () {
+    var _this = this, loadStarted = false;
+    this.listeners = {};
+    this.addEventListener = function (type, fn) {
+      _this.listeners[type] = _this.listeners[type] || [];
+      _this.listeners[type].push(fn);
+    };
+    this.removeEventListener = function (type, fn) {
+      if (_this.listeners[type]) _this.listeners[type].splice(_this.listeners[type].indexOf(fn), 1);
+    };
+    this.dispatchEvent = function (evt) {
+      var list = _this.listeners[evt.type];
+      if (list) {
+        for (var i = 0; i < list.length; i++) {
+          list[i].call(_this, evt);
+        }
+      }
+    };
+    this.onabort = this.onerror = this.onload = this.onloadstart = this.onloadend = this.onprogress = null;
+
+    var constructEvent = function (type, evt) {
+      var e = {type: type, target: _this, loaded: evt.loaded, total: evt.total, error: evt.error};
+      if (evt.result != null) e.target.result = evt.result;
+      return e;
+    };
+    var listener = function (evt) {
+      if (!loadStarted) {
+        loadStarted = true;
+        if (_this.onloadstart) _this.onloadstart(constructEvent('loadstart', evt));
+      }
+      var e;
+      if (evt.type === 'load') {
+        if (_this.onloadend) _this.onloadend(constructEvent('loadend', evt));
+        e = constructEvent('load', evt);
+        if (_this.onload) _this.onload(e);
+        _this.dispatchEvent(e);
+      } else if (evt.type === 'progress') {
+        e = constructEvent('progress', evt);
+        if (_this.onprogress) _this.onprogress(e);
+        _this.dispatchEvent(e);
+      } else {
+        e = constructEvent('error', evt);
+        if (_this.onerror) _this.onerror(e);
+        _this.dispatchEvent(e);
+      }
+    };
+    this.readAsDataURL = function (file) {
+      FileAPI.readAsDataURL(file, listener);
+    };
+    this.readAsText = function (file) {
+      FileAPI.readAsText(file, listener);
+    };
+  };
+}
diff --git a/src/main/resources/static/lib/ng-file-upload.js b/src/main/resources/static/lib/ng-file-upload.js
new file mode 100644
index 0000000..c6a9c43
--- /dev/null
+++ b/src/main/resources/static/lib/ng-file-upload.js
@@ -0,0 +1,2476 @@
+/**!
+ * AngularJS file upload directives and services. Supoorts: file upload/drop/paste, resume, cancel/abort,
+ * progress, resize, thumbnail, preview, validation and CORS
+ * @author  Danial  <danial.farid@gmail.com>
+ * @version 12.2.13
+ */
+
+if (window.XMLHttpRequest && !(window.FileAPI && FileAPI.shouldLoad)) {
+  window.XMLHttpRequest.prototype.setRequestHeader = (function (orig) {
+    return function (header, value) {
+      if (header === '__setXHR_') {
+        var val = value(this);
+        // fix for angular < 1.2.0
+        if (val instanceof Function) {
+          val(this);
+        }
+      } else {
+        orig.apply(this, arguments);
+      }
+    };
+  })(window.XMLHttpRequest.prototype.setRequestHeader);
+}
+
+var ngFileUpload = angular.module('ngFileUpload', []);
+
+ngFileUpload.version = '12.2.13';
+
+ngFileUpload.service('UploadBase', ['$http', '$q', '$timeout', function ($http, $q, $timeout) {
+  var upload = this;
+  upload.promisesCount = 0;
+
+  this.isResumeSupported = function () {
+    return window.Blob && window.Blob.prototype.slice;
+  };
+
+  var resumeSupported = this.isResumeSupported();
+
+  function sendHttp(config) {
+    config.method = config.method || 'POST';
+    config.headers = config.headers || {};
+
+    var deferred = config._deferred = config._deferred || $q.defer();
+    var promise = deferred.promise;
+
+    function notifyProgress(e) {
+      if (deferred.notify) {
+        deferred.notify(e);
+      }
+      if (promise.progressFunc) {
+        $timeout(function () {
+          promise.progressFunc(e);
+        });
+      }
+    }
+
+    function getNotifyEvent(n) {
+      if (config._start != null && resumeSupported) {
+        return {
+          loaded: n.loaded + config._start,
+          total: (config._file && config._file.size) || n.total,
+          type: n.type, config: config,
+          lengthComputable: true, target: n.target
+        };
+      } else {
+        return n;
+      }
+    }
+
+    if (!config.disableProgress) {
+      config.headers.__setXHR_ = function () {
+        return function (xhr) {
+          if (!xhr || !xhr.upload || !xhr.upload.addEventListener) return;
+          config.__XHR = xhr;
+          if (config.xhrFn) config.xhrFn(xhr);
+          xhr.upload.addEventListener('progress', function (e) {
+            e.config = config;
+            notifyProgress(getNotifyEvent(e));
+          }, false);
+          //fix for firefox not firing upload progress end, also IE8-9
+          xhr.upload.addEventListener('load', function (e) {
+            if (e.lengthComputable) {
+              e.config = config;
+              notifyProgress(getNotifyEvent(e));
+            }
+          }, false);
+        };
+      };
+    }
+
+    function uploadWithAngular() {
+      $http(config).then(function (r) {
+          if (resumeSupported && config._chunkSize && !config._finished && config._file) {
+            var fileSize = config._file && config._file.size || 0;
+            notifyProgress({
+                loaded: Math.min(config._end, fileSize),
+                total: fileSize,
+                config: config,
+                type: 'progress'
+              }
+            );
+            upload.upload(config, true);
+          } else {
+            if (config._finished) delete config._finished;
+            deferred.resolve(r);
+          }
+        }, function (e) {
+          deferred.reject(e);
+        }, function (n) {
+          deferred.notify(n);
+        }
+      );
+    }
+
+    if (!resumeSupported) {
+      uploadWithAngular();
+    } else if (config._chunkSize && config._end && !config._finished) {
+      config._start = config._end;
+      config._end += config._chunkSize;
+      uploadWithAngular();
+    } else if (config.resumeSizeUrl) {
+      $http.get(config.resumeSizeUrl).then(function (resp) {
+        if (config.resumeSizeResponseReader) {
+          config._start = config.resumeSizeResponseReader(resp.data);
+        } else {
+          config._start = parseInt((resp.data.size == null ? resp.data : resp.data.size).toString());
+        }
+        if (config._chunkSize) {
+          config._end = config._start + config._chunkSize;
+        }
+        uploadWithAngular();
+      }, function (e) {
+        throw e;
+      });
+    } else if (config.resumeSize) {
+      config.resumeSize().then(function (size) {
+        config._start = size;
+        if (config._chunkSize) {
+          config._end = config._start + config._chunkSize;
+        }
+        uploadWithAngular();
+      }, function (e) {
+        throw e;
+      });
+    } else {
+      if (config._chunkSize) {
+        config._start = 0;
+        config._end = config._start + config._chunkSize;
+      }
+      uploadWithAngular();
+    }
+
+
+    promise.success = function (fn) {
+      promise.then(function (response) {
+        fn(response.data, response.status, response.headers, config);
+      });
+      return promise;
+    };
+
+    promise.error = function (fn) {
+      promise.then(null, function (response) {
+        fn(response.data, response.status, response.headers, config);
+      });
+      return promise;
+    };
+
+    promise.progress = function (fn) {
+      promise.progressFunc = fn;
+      promise.then(null, null, function (n) {
+        fn(n);
+      });
+      return promise;
+    };
+    promise.abort = promise.pause = function () {
+      if (config.__XHR) {
+        $timeout(function () {
+          config.__XHR.abort();
+        });
+      }
+      return promise;
+    };
+    promise.xhr = function (fn) {
+      config.xhrFn = (function (origXhrFn) {
+        return function () {
+          if (origXhrFn) origXhrFn.apply(promise, arguments);
+          fn.apply(promise, arguments);
+        };
+      })(config.xhrFn);
+      return promise;
+    };
+
+    upload.promisesCount++;
+    if (promise['finally'] && promise['finally'] instanceof Function) {
+      promise['finally'](function () {
+        upload.promisesCount--;
+      });
+    }
+    return promise;
+  }
+
+  this.isUploadInProgress = function () {
+    return upload.promisesCount > 0;
+  };
+
+  this.rename = function (file, name) {
+    file.ngfName = name;
+    return file;
+  };
+
+  this.jsonBlob = function (val) {
+    if (val != null && !angular.isString(val)) {
+      val = JSON.stringify(val);
+    }
+    var blob = new window.Blob([val], {type: 'application/json'});
+    blob._ngfBlob = true;
+    return blob;
+  };
+
+  this.json = function (val) {
+    return angular.toJson(val);
+  };
+
+  function copy(obj) {
+    var clone = {};
+    for (var key in obj) {
+      if (obj.hasOwnProperty(key)) {
+        clone[key] = obj[key];
+      }
+    }
+    return clone;
+  }
+
+  this.isFile = function (file) {
+    return file != null && (file instanceof window.Blob || (file.flashId && file.name && file.size));
+  };
+
+  this.upload = function (config, internal) {
+    function toResumeFile(file, formData) {
+      if (file._ngfBlob) return file;
+      config._file = config._file || file;
+      if (config._start != null && resumeSupported) {
+        if (config._end && config._end >= file.size) {
+          config._finished = true;
+          config._end = file.size;
+        }
+        var slice = file.slice(config._start, config._end || file.size);
+        slice.name = file.name;
+        slice.ngfName = file.ngfName;
+        if (config._chunkSize) {
+          formData.append('_chunkSize', config._chunkSize);
+          formData.append('_currentChunkSize', config._end - config._start);
+          formData.append('_chunkNumber', Math.floor(config._start / config._chunkSize));
+          formData.append('_totalSize', config._file.size);
+        }
+        return slice;
+      }
+      return file;
+    }
+
+    function addFieldToFormData(formData, val, key) {
+      if (val !== undefined) {
+        if (angular.isDate(val)) {
+          val = val.toISOString();
+        }
+        if (angular.isString(val)) {
+          formData.append(key, val);
+        } else if (upload.isFile(val)) {
+          var file = toResumeFile(val, formData);
+          var split = key.split(',');
+          if (split[1]) {
+            file.ngfName = split[1].replace(/^\s+|\s+$/g, '');
+            key = split[0];
+          }
+          config._fileKey = config._fileKey || key;
+          formData.append(key, file, file.ngfName || file.name);
+        } else {
+          if (angular.isObject(val)) {
+            if (val.$$ngfCircularDetection) throw 'ngFileUpload: Circular reference in config.data. Make sure specified data for Upload.upload() has no circular reference: ' + key;
+
+            val.$$ngfCircularDetection = true;
+            try {
+              for (var k in val) {
+                if (val.hasOwnProperty(k) && k !== '$$ngfCircularDetection') {
+                  var objectKey = config.objectKey == null ? '[i]' : config.objectKey;
+                  if (val.length && parseInt(k) > -1) {
+                    objectKey = config.arrayKey == null ? objectKey : config.arrayKey;
+                  }
+                  addFieldToFormData(formData, val[k], key + objectKey.replace(/[ik]/g, k));
+                }
+              }
+            } finally {
+              delete val.$$ngfCircularDetection;
+            }
+          } else {
+            formData.append(key, val);
+          }
+        }
+      }
+    }
+
+    function digestConfig() {
+      config._chunkSize = upload.translateScalars(config.resumeChunkSize);
+      config._chunkSize = config._chunkSize ? parseInt(config._chunkSize.toString()) : null;
+
+      config.headers = config.headers || {};
+      config.headers['Content-Type'] = undefined;
+      config.transformRequest = config.transformRequest ?
+        (angular.isArray(config.transformRequest) ?
+          config.transformRequest : [config.transformRequest]) : [];
+      config.transformRequest.push(function (data) {
+        var formData = new window.FormData(), key;
+        data = data || config.fields || {};
+        if (config.file) {
+          data.file = config.file;
+        }
+        for (key in data) {
+          if (data.hasOwnProperty(key)) {
+            var val = data[key];
+            if (config.formDataAppender) {
+              config.formDataAppender(formData, key, val);
+            } else {
+              addFieldToFormData(formData, val, key);
+            }
+          }
+        }
+
+        return formData;
+      });
+    }
+
+    if (!internal) config = copy(config);
+    if (!config._isDigested) {
+      config._isDigested = true;
+      digestConfig();
+    }
+
+    return sendHttp(config);
+  };
+
+  this.http = function (config) {
+    config = copy(config);
+    config.transformRequest = config.transformRequest || function (data) {
+        if ((window.ArrayBuffer && data instanceof window.ArrayBuffer) || data instanceof window.Blob) {
+          return data;
+        }
+        return $http.defaults.transformRequest[0].apply(this, arguments);
+      };
+    config._chunkSize = upload.translateScalars(config.resumeChunkSize);
+    config._chunkSize = config._chunkSize ? parseInt(config._chunkSize.toString()) : null;
+
+    return sendHttp(config);
+  };
+
+  this.translateScalars = function (str) {
+    if (angular.isString(str)) {
+      if (str.search(/kb/i) === str.length - 2) {
+        return parseFloat(str.substring(0, str.length - 2) * 1024);
+      } else if (str.search(/mb/i) === str.length - 2) {
+        return parseFloat(str.substring(0, str.length - 2) * 1048576);
+      } else if (str.search(/gb/i) === str.length - 2) {
+        return parseFloat(str.substring(0, str.length - 2) * 1073741824);
+      } else if (str.search(/b/i) === str.length - 1) {
+        return parseFloat(str.substring(0, str.length - 1));
+      } else if (str.search(/s/i) === str.length - 1) {
+        return parseFloat(str.substring(0, str.length - 1));
+      } else if (str.search(/m/i) === str.length - 1) {
+        return parseFloat(str.substring(0, str.length - 1) * 60);
+      } else if (str.search(/h/i) === str.length - 1) {
+        return parseFloat(str.substring(0, str.length - 1) * 3600);
+      }
+    }
+    return str;
+  };
+
+  this.urlToBlob = function(url) {
+    var defer = $q.defer();
+    $http({url: url, method: 'get', responseType: 'arraybuffer'}).then(function (resp) {
+      var arrayBufferView = new Uint8Array(resp.data);
+      var type = resp.headers('content-type') || 'image/WebP';
+      var blob = new window.Blob([arrayBufferView], {type: type});
+      var matches = url.match(/.*\/(.+?)(\?.*)?$/);
+      if (matches.length > 1) {
+        blob.name = matches[1];
+      }
+      defer.resolve(blob);
+    }, function (e) {
+      defer.reject(e);
+    });
+    return defer.promise;
+  };
+
+  this.setDefaults = function (defaults) {
+    this.defaults = defaults || {};
+  };
+
+  this.defaults = {};
+  this.version = ngFileUpload.version;
+}
+
+]);
+
+ngFileUpload.service('Upload', ['$parse', '$timeout', '$compile', '$q', 'UploadExif', function ($parse, $timeout, $compile, $q, UploadExif) {
+  var upload = UploadExif;
+  upload.getAttrWithDefaults = function (attr, name) {
+    if (attr[name] != null) return attr[name];
+    var def = upload.defaults[name];
+    return (def == null ? def : (angular.isString(def) ? def : JSON.stringify(def)));
+  };
+
+  upload.attrGetter = function (name, attr, scope, params) {
+    var attrVal = this.getAttrWithDefaults(attr, name);
+    if (scope) {
+      try {
+        if (params) {
+          return $parse(attrVal)(scope, params);
+        } else {
+          return $parse(attrVal)(scope);
+        }
+      } catch (e) {
+        // hangle string value without single qoute
+        if (name.search(/min|max|pattern/i)) {
+          return attrVal;
+        } else {
+          throw e;
+        }
+      }
+    } else {
+      return attrVal;
+    }
+  };
+
+  upload.shouldUpdateOn = function (type, attr, scope) {
+    var modelOptions = upload.attrGetter('ngfModelOptions', attr, scope);
+    if (modelOptions && modelOptions.updateOn) {
+      return modelOptions.updateOn.split(' ').indexOf(type) > -1;
+    }
+    return true;
+  };
+
+  upload.emptyPromise = function () {
+    var d = $q.defer();
+    var args = arguments;
+    $timeout(function () {
+      d.resolve.apply(d, args);
+    });
+    return d.promise;
+  };
+
+  upload.rejectPromise = function () {
+    var d = $q.defer();
+    var args = arguments;
+    $timeout(function () {
+      d.reject.apply(d, args);
+    });
+    return d.promise;
+  };
+
+  upload.happyPromise = function (promise, data) {
+    var d = $q.defer();
+    promise.then(function (result) {
+      d.resolve(result);
+    }, function (error) {
+      $timeout(function () {
+        throw error;
+      });
+      d.resolve(data);
+    });
+    return d.promise;
+  };
+
+  function applyExifRotations(files, attr, scope) {
+    var promises = [upload.emptyPromise()];
+    angular.forEach(files, function (f, i) {
+      if (f.type.indexOf('image/jpeg') === 0 && upload.attrGetter('ngfFixOrientation', attr, scope, {$file: f})) {
+        promises.push(upload.happyPromise(upload.applyExifRotation(f), f).then(function (fixedFile) {
+          files.splice(i, 1, fixedFile);
+        }));
+      }
+    });
+    return $q.all(promises);
+  }
+
+  function resizeFile(files, attr, scope, ngModel) {
+    var resizeVal = upload.attrGetter('ngfResize', attr, scope);
+    if (!resizeVal || !upload.isResizeSupported() || !files.length) return upload.emptyPromise();
+    if (resizeVal instanceof Function) {
+      var defer = $q.defer();
+      return resizeVal(files).then(function (p) {
+        resizeWithParams(p, files, attr, scope, ngModel).then(function (r) {
+          defer.resolve(r);
+        }, function (e) {
+          defer.reject(e);
+        });
+      }, function (e) {
+        defer.reject(e);
+      });
+    } else {
+      return resizeWithParams(resizeVal, files, attr, scope, ngModel);
+    }
+  }
+
+  function resizeWithParams(params, files, attr, scope, ngModel) {
+    var promises = [upload.emptyPromise()];
+
+    function handleFile(f, i) {
+      if (f.type.indexOf('image') === 0) {
+        if (params.pattern && !upload.validatePattern(f, params.pattern)) return;
+        params.resizeIf = function (width, height) {
+          return upload.attrGetter('ngfResizeIf', attr, scope,
+            {$width: width, $height: height, $file: f});
+        };
+        var promise = upload.resize(f, params);
+        promises.push(promise);
+        promise.then(function (resizedFile) {
+          files.splice(i, 1, resizedFile);
+        }, function (e) {
+          f.$error = 'resize';
+          (f.$errorMessages = (f.$errorMessages || {})).resize = true;
+          f.$errorParam = (e ? (e.message ? e.message : e) + ': ' : '') + (f && f.name);
+          ngModel.$ngfValidations.push({name: 'resize', valid: false});
+          upload.applyModelValidation(ngModel, files);
+        });
+      }
+    }
+
+    for (var i = 0; i < files.length; i++) {
+      handleFile(files[i], i);
+    }
+    return $q.all(promises);
+  }
+
+  upload.updateModel = function (ngModel, attr, scope, fileChange, files, evt, noDelay) {
+    function update(files, invalidFiles, newFiles, dupFiles, isSingleModel) {
+      attr.$$ngfPrevValidFiles = files;
+      attr.$$ngfPrevInvalidFiles = invalidFiles;
+      var file = files && files.length ? files[0] : null;
+      var invalidFile = invalidFiles && invalidFiles.length ? invalidFiles[0] : null;
+
+      if (ngModel) {
+        upload.applyModelValidation(ngModel, files);
+        ngModel.$setViewValue(isSingleModel ? file : files);
+      }
+
+      if (fileChange) {
+        $parse(fileChange)(scope, {
+          $files: files,
+          $file: file,
+          $newFiles: newFiles,
+          $duplicateFiles: dupFiles,
+          $invalidFiles: invalidFiles,
+          $invalidFile: invalidFile,
+          $event: evt
+        });
+      }
+
+      var invalidModel = upload.attrGetter('ngfModelInvalid', attr);
+      if (invalidModel) {
+        $timeout(function () {
+          $parse(invalidModel).assign(scope, isSingleModel ? invalidFile : invalidFiles);
+        });
+      }
+      $timeout(function () {
+        // scope apply changes
+      });
+    }
+
+    var allNewFiles, dupFiles = [], prevValidFiles, prevInvalidFiles,
+      invalids = [], valids = [];
+
+    function removeDuplicates() {
+      function equals(f1, f2) {
+        return f1.name === f2.name && (f1.$ngfOrigSize || f1.size) === (f2.$ngfOrigSize || f2.size) &&
+          f1.type === f2.type;
+      }
+
+      function isInPrevFiles(f) {
+        var j;
+        for (j = 0; j < prevValidFiles.length; j++) {
+          if (equals(f, prevValidFiles[j])) {
+            return true;
+          }
+        }
+        for (j = 0; j < prevInvalidFiles.length; j++) {
+          if (equals(f, prevInvalidFiles[j])) {
+            return true;
+          }
+        }
+        return false;
+      }
+
+      if (files) {
+        allNewFiles = [];
+        dupFiles = [];
+        for (var i = 0; i < files.length; i++) {
+          if (isInPrevFiles(files[i])) {
+            dupFiles.push(files[i]);
+          } else {
+            allNewFiles.push(files[i]);
+          }
+        }
+      }
+    }
+
+    function toArray(v) {
+      return angular.isArray(v) ? v : [v];
+    }
+
+    function resizeAndUpdate() {
+      function updateModel() {
+        $timeout(function () {
+          update(keep ? prevValidFiles.concat(valids) : valids,
+            keep ? prevInvalidFiles.concat(invalids) : invalids,
+            files, dupFiles, isSingleModel);
+        }, options && options.debounce ? options.debounce.change || options.debounce : 0);
+      }
+
+      var resizingFiles = validateAfterResize ? allNewFiles : valids;
+      resizeFile(resizingFiles, attr, scope, ngModel).then(function () {
+        if (validateAfterResize) {
+          upload.validate(allNewFiles, keep ? prevValidFiles.length : 0, ngModel, attr, scope)
+            .then(function (validationResult) {
+              valids = validationResult.validsFiles;
+              invalids = validationResult.invalidsFiles;
+              updateModel();
+            });
+        } else {
+          updateModel();
+        }
+      }, function () {
+        for (var i = 0; i < resizingFiles.length; i++) {
+          var f = resizingFiles[i];
+          if (f.$error === 'resize') {
+            var index = valids.indexOf(f);
+            if (index > -1) {
+              valids.splice(index, 1);
+              invalids.push(f);
+            }
+            updateModel();
+          }
+        }
+      });
+    }
+
+    prevValidFiles = attr.$$ngfPrevValidFiles || [];
+    prevInvalidFiles = attr.$$ngfPrevInvalidFiles || [];
+    if (ngModel && ngModel.$modelValue) {
+      prevValidFiles = toArray(ngModel.$modelValue);
+    }
+
+    var keep = upload.attrGetter('ngfKeep', attr, scope);
+    allNewFiles = (files || []).slice(0);
+    if (keep === 'distinct' || upload.attrGetter('ngfKeepDistinct', attr, scope) === true) {
+      removeDuplicates(attr, scope);
+    }
+
+    var isSingleModel = !keep && !upload.attrGetter('ngfMultiple', attr, scope) && !upload.attrGetter('multiple', attr);
+
+    if (keep && !allNewFiles.length) return;
+
+    upload.attrGetter('ngfBeforeModelChange', attr, scope, {
+      $files: files,
+      $file: files && files.length ? files[0] : null,
+      $newFiles: allNewFiles,
+      $duplicateFiles: dupFiles,
+      $event: evt
+    });
+
+    var validateAfterResize = upload.attrGetter('ngfValidateAfterResize', attr, scope);
+
+    var options = upload.attrGetter('ngfModelOptions', attr, scope);
+    upload.validate(allNewFiles, keep ? prevValidFiles.length : 0, ngModel, attr, scope)
+      .then(function (validationResult) {
+      if (noDelay) {
+        update(allNewFiles, [], files, dupFiles, isSingleModel);
+      } else {
+        if ((!options || !options.allowInvalid) && !validateAfterResize) {
+          valids = validationResult.validFiles;
+          invalids = validationResult.invalidFiles;
+        } else {
+          valids = allNewFiles;
+        }
+        if (upload.attrGetter('ngfFixOrientation', attr, scope) && upload.isExifSupported()) {
+          applyExifRotations(valids, attr, scope).then(function () {
+            resizeAndUpdate();
+          });
+        } else {
+          resizeAndUpdate();
+        }
+      }
+    });
+  };
+
+  return upload;
+}]);
+
+ngFileUpload.directive('ngfSelect', ['$parse', '$timeout', '$compile', 'Upload', function ($parse, $timeout, $compile, Upload) {
+  var generatedElems = [];
+
+  function isDelayedClickSupported(ua) {
+    // fix for android native browser < 4.4 and safari windows
+    var m = ua.match(/Android[^\d]*(\d+)\.(\d+)/);
+    if (m && m.length > 2) {
+      var v = Upload.defaults.androidFixMinorVersion || 4;
+      return parseInt(m[1]) < 4 || (parseInt(m[1]) === v && parseInt(m[2]) < v);
+    }
+
+    // safari on windows
+    return ua.indexOf('Chrome') === -1 && /.*Windows.*Safari.*/.test(ua);
+  }
+
+  function linkFileSelect(scope, elem, attr, ngModel, $parse, $timeout, $compile, upload) {
+    /** @namespace attr.ngfSelect */
+    /** @namespace attr.ngfChange */
+    /** @namespace attr.ngModel */
+    /** @namespace attr.ngfModelOptions */
+    /** @namespace attr.ngfMultiple */
+    /** @namespace attr.ngfCapture */
+    /** @namespace attr.ngfValidate */
+    /** @namespace attr.ngfKeep */
+    var attrGetter = function (name, scope) {
+      return upload.attrGetter(name, attr, scope);
+    };
+
+    function isInputTypeFile() {
+      return elem[0].tagName.toLowerCase() === 'input' && attr.type && attr.type.toLowerCase() === 'file';
+    }
+
+    function fileChangeAttr() {
+      return attrGetter('ngfChange') || attrGetter('ngfSelect');
+    }
+
+    function changeFn(evt) {
+      if (upload.shouldUpdateOn('change', attr, scope)) {
+        var fileList = evt.__files_ || (evt.target && evt.target.files), files = [];
+        /* Handle duplicate call in  IE11 */
+        if (!fileList) return;
+        for (var i = 0; i < fileList.length; i++) {
+          files.push(fileList[i]);
+        }
+        upload.updateModel(ngModel, attr, scope, fileChangeAttr(),
+          files.length ? files : null, evt);
+      }
+    }
+
+    upload.registerModelChangeValidator(ngModel, attr, scope);
+
+    var unwatches = [];
+    if (attrGetter('ngfMultiple')) {
+      unwatches.push(scope.$watch(attrGetter('ngfMultiple'), function () {
+        fileElem.attr('multiple', attrGetter('ngfMultiple', scope));
+      }));
+    }
+    if (attrGetter('ngfCapture')) {
+      unwatches.push(scope.$watch(attrGetter('ngfCapture'), function () {
+        fileElem.attr('capture', attrGetter('ngfCapture', scope));
+      }));
+    }
+    if (attrGetter('ngfAccept')) {
+      unwatches.push(scope.$watch(attrGetter('ngfAccept'), function () {
+        fileElem.attr('accept', attrGetter('ngfAccept', scope));
+      }));
+    }
+    unwatches.push(attr.$observe('accept', function () {
+      fileElem.attr('accept', attrGetter('accept'));
+    }));
+    function bindAttrToFileInput(fileElem, label) {
+      function updateId(val) {
+        fileElem.attr('id', 'ngf-' + val);
+        label.attr('id', 'ngf-label-' + val);
+      }
+
+      for (var i = 0; i < elem[0].attributes.length; i++) {
+        var attribute = elem[0].attributes[i];
+        if (attribute.name !== 'type' && attribute.name !== 'class' && attribute.name !== 'style') {
+          if (attribute.name === 'id') {
+            updateId(attribute.value);
+            unwatches.push(attr.$observe('id', updateId));
+          } else {
+            fileElem.attr(attribute.name, (!attribute.value && (attribute.name === 'required' ||
+            attribute.name === 'multiple')) ? attribute.name : attribute.value);
+          }
+        }
+      }
+    }
+
+    function createFileInput() {
+      if (isInputTypeFile()) {
+        return elem;
+      }
+
+      var fileElem = angular.element('<input type="file">');
+
+      var label = angular.element('<label>upload</label>');
+      label.css('visibility', 'hidden').css('position', 'absolute').css('overflow', 'hidden')
+        .css('width', '0px').css('height', '0px').css('border', 'none')
+        .css('margin', '0px').css('padding', '0px').attr('tabindex', '-1');
+      bindAttrToFileInput(fileElem, label);
+
+      generatedElems.push({el: elem, ref: label});
+
+      document.body.appendChild(label.append(fileElem)[0]);
+
+      return fileElem;
+    }
+
+    function clickHandler(evt) {
+      if (elem.attr('disabled')) return false;
+      if (attrGetter('ngfSelectDisabled', scope)) return;
+
+      var r = detectSwipe(evt);
+      // prevent the click if it is a swipe
+      if (r != null) return r;
+
+      resetModel(evt);
+
+      // fix for md when the element is removed from the DOM and added back #460
+      try {
+        if (!isInputTypeFile() && !document.body.contains(fileElem[0])) {
+          generatedElems.push({el: elem, ref: fileElem.parent()});
+          document.body.appendChild(fileElem.parent()[0]);
+          fileElem.bind('change', changeFn);
+        }
+      } catch (e) {/*ignore*/
+      }
+
+      if (isDelayedClickSupported(navigator.userAgent)) {
+        setTimeout(function () {
+          fileElem[0].click();
+        }, 0);
+      } else {
+        fileElem[0].click();
+      }
+
+      return false;
+    }
+
+
+    var initialTouchStartY = 0;
+    var initialTouchStartX = 0;
+
+    function detectSwipe(evt) {
+      var touches = evt.changedTouches || (evt.originalEvent && evt.originalEvent.changedTouches);
+      if (touches) {
+        if (evt.type === 'touchstart') {
+          initialTouchStartX = touches[0].clientX;
+          initialTouchStartY = touches[0].clientY;
+          return true; // don't block event default
+        } else {
+          // prevent scroll from triggering event
+          if (evt.type === 'touchend') {
+            var currentX = touches[0].clientX;
+            var currentY = touches[0].clientY;
+            if ((Math.abs(currentX - initialTouchStartX) > 20) ||
+              (Math.abs(currentY - initialTouchStartY) > 20)) {
+              evt.stopPropagation();
+              evt.preventDefault();
+              return false;
+            }
+          }
+          return true;
+        }
+      }
+    }
+
+    var fileElem = elem;
+
+    function resetModel(evt) {
+      if (upload.shouldUpdateOn('click', attr, scope) && fileElem.val()) {
+        fileElem.val(null);
+        upload.updateModel(ngModel, attr, scope, fileChangeAttr(), null, evt, true);
+      }
+    }
+
+    if (!isInputTypeFile()) {
+      fileElem = createFileInput();
+    }
+    fileElem.bind('change', changeFn);
+
+    if (!isInputTypeFile()) {
+      elem.bind('click touchstart touchend', clickHandler);
+    } else {
+      elem.bind('click', resetModel);
+    }
+
+    function ie10SameFileSelectFix(evt) {
+      if (fileElem && !fileElem.attr('__ngf_ie10_Fix_')) {
+        if (!fileElem[0].parentNode) {
+          fileElem = null;
+          return;
+        }
+        evt.preventDefault();
+        evt.stopPropagation();
+        fileElem.unbind('click');
+        var clone = fileElem.clone();
+        fileElem.replaceWith(clone);
+        fileElem = clone;
+        fileElem.attr('__ngf_ie10_Fix_', 'true');
+        fileElem.bind('change', changeFn);
+        fileElem.bind('click', ie10SameFileSelectFix);
+        fileElem[0].click();
+        return false;
+      } else {
+        fileElem.removeAttr('__ngf_ie10_Fix_');
+      }
+    }
+
+    if (navigator.appVersion.indexOf('MSIE 10') !== -1) {
+      fileElem.bind('click', ie10SameFileSelectFix);
+    }
+
+    if (ngModel) ngModel.$formatters.push(function (val) {
+      if (val == null || val.length === 0) {
+        if (fileElem.val()) {
+          fileElem.val(null);
+        }
+      }
+      return val;
+    });
+
+    scope.$on('$destroy', function () {
+      if (!isInputTypeFile()) fileElem.parent().remove();
+      angular.forEach(unwatches, function (unwatch) {
+        unwatch();
+      });
+    });
+
+    $timeout(function () {
+      for (var i = 0; i < generatedElems.length; i++) {
+        var g = generatedElems[i];
+        if (!document.body.contains(g.el[0])) {
+          generatedElems.splice(i, 1);
+          g.ref.remove();
+        }
+      }
+    });
+
+    if (window.FileAPI && window.FileAPI.ngfFixIE) {
+      window.FileAPI.ngfFixIE(elem, fileElem, changeFn);
+    }
+  }
+
+  return {
+    restrict: 'AEC',
+    require: '?ngModel',
+    link: function (scope, elem, attr, ngModel) {
+      linkFileSelect(scope, elem, attr, ngModel, $parse, $timeout, $compile, Upload);
+    }
+  };
+}]);
+
+(function () {
+
+  ngFileUpload.service('UploadDataUrl', ['UploadBase', '$timeout', '$q', function (UploadBase, $timeout, $q) {
+    var upload = UploadBase;
+    upload.base64DataUrl = function (file) {
+      if (angular.isArray(file)) {
+        var d = $q.defer(), count = 0;
+        angular.forEach(file, function (f) {
+          upload.dataUrl(f, true)['finally'](function () {
+            count++;
+            if (count === file.length) {
+              var urls = [];
+              angular.forEach(file, function (ff) {
+                urls.push(ff.$ngfDataUrl);
+              });
+              d.resolve(urls, file);
+            }
+          });
+        });
+        return d.promise;
+      } else {
+        return upload.dataUrl(file, true);
+      }
+    };
+    upload.dataUrl = function (file, disallowObjectUrl) {
+      if (!file) return upload.emptyPromise(file, file);
+      if ((disallowObjectUrl && file.$ngfDataUrl != null) || (!disallowObjectUrl && file.$ngfBlobUrl != null)) {
+        return upload.emptyPromise(disallowObjectUrl ? file.$ngfDataUrl : file.$ngfBlobUrl, file);
+      }
+      var p = disallowObjectUrl ? file.$$ngfDataUrlPromise : file.$$ngfBlobUrlPromise;
+      if (p) return p;
+
+      var deferred = $q.defer();
+      $timeout(function () {
+        if (window.FileReader && file &&
+          (!window.FileAPI || navigator.userAgent.indexOf('MSIE 8') === -1 || file.size < 20000) &&
+          (!window.FileAPI || navigator.userAgent.indexOf('MSIE 9') === -1 || file.size < 4000000)) {
+          //prefer URL.createObjectURL for handling refrences to files of all sizes
+          //since it doesn´t build a large string in memory
+          var URL = window.URL || window.webkitURL;
+          if (URL && URL.createObjectURL && !disallowObjectUrl) {
+            var url;
+            try {
+              url = URL.createObjectURL(file);
+            } catch (e) {
+              $timeout(function () {
+                file.$ngfBlobUrl = '';
+                deferred.reject();
+              });
+              return;
+            }
+            $timeout(function () {
+              file.$ngfBlobUrl = url;
+              if (url) {
+                deferred.resolve(url, file);
+                upload.blobUrls = upload.blobUrls || [];
+                upload.blobUrlsTotalSize = upload.blobUrlsTotalSize || 0;
+                upload.blobUrls.push({url: url, size: file.size});
+                upload.blobUrlsTotalSize += file.size || 0;
+                var maxMemory = upload.defaults.blobUrlsMaxMemory || 268435456;
+                var maxLength = upload.defaults.blobUrlsMaxQueueSize || 200;
+                while ((upload.blobUrlsTotalSize > maxMemory || upload.blobUrls.length > maxLength) && upload.blobUrls.length > 1) {
+                  var obj = upload.blobUrls.splice(0, 1)[0];
+                  URL.revokeObjectURL(obj.url);
+                  upload.blobUrlsTotalSize -= obj.size;
+                }
+              }
+            });
+          } else {
+            var fileReader = new FileReader();
+            fileReader.onload = function (e) {
+              $timeout(function () {
+                file.$ngfDataUrl = e.target.result;
+                deferred.resolve(e.target.result, file);
+                $timeout(function () {
+                  delete file.$ngfDataUrl;
+                }, 1000);
+              });
+            };
+            fileReader.onerror = function () {
+              $timeout(function () {
+                file.$ngfDataUrl = '';
+                deferred.reject();
+              });
+            };
+            fileReader.readAsDataURL(file);
+          }
+        } else {
+          $timeout(function () {
+            file[disallowObjectUrl ? '$ngfDataUrl' : '$ngfBlobUrl'] = '';
+            deferred.reject();
+          });
+        }
+      });
+
+      if (disallowObjectUrl) {
+        p = file.$$ngfDataUrlPromise = deferred.promise;
+      } else {
+        p = file.$$ngfBlobUrlPromise = deferred.promise;
+      }
+      p['finally'](function () {
+        delete file[disallowObjectUrl ? '$$ngfDataUrlPromise' : '$$ngfBlobUrlPromise'];
+      });
+      return p;
+    };
+    return upload;
+  }]);
+
+  function getTagType(el) {
+    if (el.tagName.toLowerCase() === 'img') return 'image';
+    if (el.tagName.toLowerCase() === 'audio') return 'audio';
+    if (el.tagName.toLowerCase() === 'video') return 'video';
+    return /./;
+  }
+
+  function linkFileDirective(Upload, $timeout, scope, elem, attr, directiveName, resizeParams, isBackground) {
+    function constructDataUrl(file) {
+      var disallowObjectUrl = Upload.attrGetter('ngfNoObjectUrl', attr, scope);
+      Upload.dataUrl(file, disallowObjectUrl)['finally'](function () {
+        $timeout(function () {
+          var src = (disallowObjectUrl ? file.$ngfDataUrl : file.$ngfBlobUrl) || file.$ngfDataUrl;
+          if (isBackground) {
+            elem.css('background-image', 'url(\'' + (src || '') + '\')');
+          } else {
+            elem.attr('src', src);
+          }
+          if (src) {
+            elem.removeClass('ng-hide');
+          } else {
+            elem.addClass('ng-hide');
+          }
+        });
+      });
+    }
+
+    $timeout(function () {
+      var unwatch = scope.$watch(attr[directiveName], function (file) {
+        var size = resizeParams;
+        if (directiveName === 'ngfThumbnail') {
+          if (!size) {
+            size = {
+              width: elem[0].naturalWidth || elem[0].clientWidth,
+              height: elem[0].naturalHeight || elem[0].clientHeight
+            };
+          }
+          if (size.width === 0 && window.getComputedStyle) {
+            var style = getComputedStyle(elem[0]);
+            if (style.width && style.width.indexOf('px') > -1 && style.height && style.height.indexOf('px') > -1) {
+              size = {
+                width: parseInt(style.width.slice(0, -2)),
+                height: parseInt(style.height.slice(0, -2))
+              };
+            }
+          }
+        }
+
+        if (angular.isString(file)) {
+          elem.removeClass('ng-hide');
+          if (isBackground) {
+            return elem.css('background-image', 'url(\'' + file + '\')');
+          } else {
+            return elem.attr('src', file);
+          }
+        }
+        if (file && file.type && file.type.search(getTagType(elem[0])) === 0 &&
+          (!isBackground || file.type.indexOf('image') === 0)) {
+          if (size && Upload.isResizeSupported()) {
+            size.resizeIf = function (width, height) {
+              return Upload.attrGetter('ngfResizeIf', attr, scope,
+                {$width: width, $height: height, $file: file});
+            };
+            Upload.resize(file, size).then(
+              function (f) {
+                constructDataUrl(f);
+              }, function (e) {
+                throw e;
+              }
+            );
+          } else {
+            constructDataUrl(file);
+          }
+        } else {
+          elem.addClass('ng-hide');
+        }
+      });
+
+      scope.$on('$destroy', function () {
+        unwatch();
+      });
+    });
+  }
+
+
+  /** @namespace attr.ngfSrc */
+  /** @namespace attr.ngfNoObjectUrl */
+  ngFileUpload.directive('ngfSrc', ['Upload', '$timeout', function (Upload, $timeout) {
+    return {
+      restrict: 'AE',
+      link: function (scope, elem, attr) {
+        linkFileDirective(Upload, $timeout, scope, elem, attr, 'ngfSrc',
+          Upload.attrGetter('ngfResize', attr, scope), false);
+      }
+    };
+  }]);
+
+  /** @namespace attr.ngfBackground */
+  /** @namespace attr.ngfNoObjectUrl */
+  ngFileUpload.directive('ngfBackground', ['Upload', '$timeout', function (Upload, $timeout) {
+    return {
+      restrict: 'AE',
+      link: function (scope, elem, attr) {
+        linkFileDirective(Upload, $timeout, scope, elem, attr, 'ngfBackground',
+          Upload.attrGetter('ngfResize', attr, scope), true);
+      }
+    };
+  }]);
+
+  /** @namespace attr.ngfThumbnail */
+  /** @namespace attr.ngfAsBackground */
+  /** @namespace attr.ngfSize */
+  /** @namespace attr.ngfNoObjectUrl */
+  ngFileUpload.directive('ngfThumbnail', ['Upload', '$timeout', function (Upload, $timeout) {
+    return {
+      restrict: 'AE',
+      link: function (scope, elem, attr) {
+        var size = Upload.attrGetter('ngfSize', attr, scope);
+        linkFileDirective(Upload, $timeout, scope, elem, attr, 'ngfThumbnail', size,
+          Upload.attrGetter('ngfAsBackground', attr, scope));
+      }
+    };
+  }]);
+
+  ngFileUpload.config(['$compileProvider', function ($compileProvider) {
+    if ($compileProvider.imgSrcSanitizationWhitelist) $compileProvider.imgSrcSanitizationWhitelist(/^\s*(https?|ftp|mailto|tel|webcal|local|file|data|blob):/);
+    if ($compileProvider.aHrefSanitizationWhitelist) $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|tel|webcal|local|file|data|blob):/);
+  }]);
+
+  ngFileUpload.filter('ngfDataUrl', ['UploadDataUrl', '$sce', function (UploadDataUrl, $sce) {
+    return function (file, disallowObjectUrl, trustedUrl) {
+      if (angular.isString(file)) {
+        return $sce.trustAsResourceUrl(file);
+      }
+      var src = file && ((disallowObjectUrl ? file.$ngfDataUrl : file.$ngfBlobUrl) || file.$ngfDataUrl);
+      if (file && !src) {
+        if (!file.$ngfDataUrlFilterInProgress && angular.isObject(file)) {
+          file.$ngfDataUrlFilterInProgress = true;
+          UploadDataUrl.dataUrl(file, disallowObjectUrl);
+        }
+        return '';
+      }
+      if (file) delete file.$ngfDataUrlFilterInProgress;
+      return (file && src ? (trustedUrl ? $sce.trustAsResourceUrl(src) : src) : file) || '';
+    };
+  }]);
+
+})();
+
+ngFileUpload.service('UploadValidate', ['UploadDataUrl', '$q', '$timeout', function (UploadDataUrl, $q, $timeout) {
+  var upload = UploadDataUrl;
+
+  function globStringToRegex(str) {
+    var regexp = '', excludes = [];
+    if (str.length > 2 && str[0] === '/' && str[str.length - 1] === '/') {
+      regexp = str.substring(1, str.length - 1);
+    } else {
+      var split = str.split(',');
+      if (split.length > 1) {
+        for (var i = 0; i < split.length; i++) {
+          var r = globStringToRegex(split[i]);
+          if (r.regexp) {
+            regexp += '(' + r.regexp + ')';
+            if (i < split.length - 1) {
+              regexp += '|';
+            }
+          } else {
+            excludes = excludes.concat(r.excludes);
+          }
+        }
+      } else {
+        if (str.indexOf('!') === 0) {
+          excludes.push('^((?!' + globStringToRegex(str.substring(1)).regexp + ').)*$');
+        } else {
+          if (str.indexOf('.') === 0) {
+            str = '*' + str;
+          }
+          regexp = '^' + str.replace(new RegExp('[.\\\\+*?\\[\\^\\]$(){}=!<>|:\\-]', 'g'), '\\$&') + '$';
+          regexp = regexp.replace(/\\\*/g, '.*').replace(/\\\?/g, '.');
+        }
+      }
+    }
+    return {regexp: regexp, excludes: excludes};
+  }
+
+  upload.validatePattern = function (file, val) {
+    if (!val) {
+      return true;
+    }
+    var pattern = globStringToRegex(val), valid = true;
+    if (pattern.regexp && pattern.regexp.length) {
+      var regexp = new RegExp(pattern.regexp, 'i');
+      valid = (file.type != null && regexp.test(file.type)) ||
+        (file.name != null && regexp.test(file.name));
+    }
+    var len = pattern.excludes.length;
+    while (len--) {
+      var exclude = new RegExp(pattern.excludes[len], 'i');
+      valid = valid && (file.type == null || exclude.test(file.type)) &&
+        (file.name == null || exclude.test(file.name));
+    }
+    return valid;
+  };
+
+  upload.ratioToFloat = function (val) {
+    var r = val.toString(), xIndex = r.search(/[x:]/i);
+    if (xIndex > -1) {
+      r = parseFloat(r.substring(0, xIndex)) / parseFloat(r.substring(xIndex + 1));
+    } else {
+      r = parseFloat(r);
+    }
+    return r;
+  };
+
+  upload.registerModelChangeValidator = function (ngModel, attr, scope) {
+    if (ngModel) {
+      ngModel.$formatters.push(function (files) {
+        if (ngModel.$dirty) {
+          var filesArray = files;
+          if (files && !angular.isArray(files)) {
+            filesArray = [files];
+          }
+          upload.validate(filesArray, 0, ngModel, attr, scope).then(function () {
+            upload.applyModelValidation(ngModel, filesArray);
+          });
+        }
+        return files;
+      });
+    }
+  };
+
+  function markModelAsDirty(ngModel, files) {
+    if (files != null && !ngModel.$dirty) {
+      if (ngModel.$setDirty) {
+        ngModel.$setDirty();
+      } else {
+        ngModel.$dirty = true;
+      }
+    }
+  }
+
+  upload.applyModelValidation = function (ngModel, files) {
+    markModelAsDirty(ngModel, files);
+    angular.forEach(ngModel.$ngfValidations, function (validation) {
+      ngModel.$setValidity(validation.name, validation.valid);
+    });
+  };
+
+  upload.getValidationAttr = function (attr, scope, name, validationName, file) {
+    var dName = 'ngf' + name[0].toUpperCase() + name.substr(1);
+    var val = upload.attrGetter(dName, attr, scope, {$file: file});
+    if (val == null) {
+      val = upload.attrGetter('ngfValidate', attr, scope, {$file: file});
+      if (val) {
+        var split = (validationName || name).split('.');
+        val = val[split[0]];
+        if (split.length > 1) {
+          val = val && val[split[1]];
+        }
+      }
+    }
+    return val;
+  };
+
+  upload.validate = function (files, prevLength, ngModel, attr, scope) {
+    ngModel = ngModel || {};
+    ngModel.$ngfValidations = ngModel.$ngfValidations || [];
+
+    angular.forEach(ngModel.$ngfValidations, function (v) {
+      v.valid = true;
+    });
+
+    var attrGetter = function (name, params) {
+      return upload.attrGetter(name, attr, scope, params);
+    };
+
+    var ignoredErrors = (upload.attrGetter('ngfIgnoreInvalid', attr, scope) || '').split(' ');
+    var runAllValidation = upload.attrGetter('ngfRunAllValidations', attr, scope);
+
+    if (files == null || files.length === 0) {
+      return upload.emptyPromise({'validFiles': files, 'invalidFiles': []});
+    }
+
+    files = files.length === undefined ? [files] : files.slice(0);
+    var invalidFiles = [];
+
+    function validateSync(name, validationName, fn) {
+      if (files) {
+        var i = files.length, valid = null;
+        while (i--) {
+          var file = files[i];
+          if (file) {
+            var val = upload.getValidationAttr(attr, scope, name, validationName, file);
+            if (val != null) {
+              if (!fn(file, val, i)) {
+                if (ignoredErrors.indexOf(name) === -1) {
+                  file.$error = name;
+                  (file.$errorMessages = (file.$errorMessages || {}))[name] = true;
+                  file.$errorParam = val;
+                  if (invalidFiles.indexOf(file) === -1) {
+                    invalidFiles.push(file);
+                  }
+                  if (!runAllValidation) {
+                    files.splice(i, 1);
+                  }
+                  valid = false;
+                } else {
+                  files.splice(i, 1);
+                }
+              }
+            }
+          }
+        }
+        if (valid !== null) {
+          ngModel.$ngfValidations.push({name: name, valid: valid});
+        }
+      }
+    }
+
+    validateSync('pattern', null, upload.validatePattern);
+    validateSync('minSize', 'size.min', function (file, val) {
+      return file.size + 0.1 >= upload.translateScalars(val);
+    });
+    validateSync('maxSize', 'size.max', function (file, val) {
+      return file.size - 0.1 <= upload.translateScalars(val);
+    });
+    var totalSize = 0;
+    validateSync('maxTotalSize', null, function (file, val) {
+      totalSize += file.size;
+      if (totalSize > upload.translateScalars(val)) {
+        files.splice(0, files.length);
+        return false;
+      }
+      return true;
+    });
+
+    validateSync('validateFn', null, function (file, r) {
+      return r === true || r === null || r === '';
+    });
+
+    if (!files.length) {
+      return upload.emptyPromise({'validFiles': [], 'invalidFiles': invalidFiles});
+    }
+
+    function validateAsync(name, validationName, type, asyncFn, fn) {
+      function resolveResult(defer, file, val) {
+        function resolveInternal(fn) {
+          if (fn()) {
+            if (ignoredErrors.indexOf(name) === -1) {
+              file.$error = name;
+              (file.$errorMessages = (file.$errorMessages || {}))[name] = true;
+              file.$errorParam = val;
+              if (invalidFiles.indexOf(file) === -1) {
+                invalidFiles.push(file);
+              }
+              if (!runAllValidation) {
+                var i = files.indexOf(file);
+                if (i > -1) files.splice(i, 1);
+              }
+              defer.resolve(false);
+            } else {
+              var j = files.indexOf(file);
+              if (j > -1) files.splice(j, 1);
+              defer.resolve(true);
+            }
+          } else {
+            defer.resolve(true);
+          }
+        }
+
+        if (val != null) {
+          asyncFn(file, val).then(function (d) {
+            resolveInternal(function () {
+              return !fn(d, val);
+            });
+          }, function () {
+            resolveInternal(function () {
+              return attrGetter('ngfValidateForce', {$file: file});
+            });
+          });
+        } else {
+          defer.resolve(true);
+        }
+      }
+
+      var promises = [upload.emptyPromise(true)];
+      if (files) {
+        files = files.length === undefined ? [files] : files;
+        angular.forEach(files, function (file) {
+          var defer = $q.defer();
+          promises.push(defer.promise);
+          if (type && (file.type == null || file.type.search(type) !== 0)) {
+            defer.resolve(true);
+            return;
+          }
+          if (name === 'dimensions' && upload.attrGetter('ngfDimensions', attr) != null) {
+            upload.imageDimensions(file).then(function (d) {
+              resolveResult(defer, file,
+                attrGetter('ngfDimensions', {$file: file, $width: d.width, $height: d.height}));
+            }, function () {
+              defer.resolve(false);
+            });
+          } else if (name === 'duration' && upload.attrGetter('ngfDuration', attr) != null) {
+            upload.mediaDuration(file).then(function (d) {
+              resolveResult(defer, file,
+                attrGetter('ngfDuration', {$file: file, $duration: d}));
+            }, function () {
+              defer.resolve(false);
+            });
+          } else {
+            resolveResult(defer, file,
+              upload.getValidationAttr(attr, scope, name, validationName, file));
+          }
+        });
+      }
+      var deffer = $q.defer();
+      $q.all(promises).then(function (values) {
+        var isValid = true;
+        for (var i = 0; i < values.length; i++) {
+          if (!values[i]) {
+            isValid = false;
+            break;
+          }
+        }
+        ngModel.$ngfValidations.push({name: name, valid: isValid});
+        deffer.resolve(isValid);
+      });
+      return deffer.promise;
+    }
+
+    var deffer = $q.defer();
+    var promises = [];
+
+    promises.push(validateAsync('maxHeight', 'height.max', /image/,
+      this.imageDimensions, function (d, val) {
+        return d.height <= val;
+      }));
+    promises.push(validateAsync('minHeight', 'height.min', /image/,
+      this.imageDimensions, function (d, val) {
+        return d.height >= val;
+      }));
+    promises.push(validateAsync('maxWidth', 'width.max', /image/,
+      this.imageDimensions, function (d, val) {
+        return d.width <= val;
+      }));
+    promises.push(validateAsync('minWidth', 'width.min', /image/,
+      this.imageDimensions, function (d, val) {
+        return d.width >= val;
+      }));
+    promises.push(validateAsync('dimensions', null, /image/,
+      function (file, val) {
+        return upload.emptyPromise(val);
+      }, function (r) {
+        return r;
+      }));
+    promises.push(validateAsync('ratio', null, /image/,
+      this.imageDimensions, function (d, val) {
+        var split = val.toString().split(','), valid = false;
+        for (var i = 0; i < split.length; i++) {
+          if (Math.abs((d.width / d.height) - upload.ratioToFloat(split[i])) < 0.01) {
+            valid = true;
+          }
+        }
+        return valid;
+      }));
+    promises.push(validateAsync('maxRatio', 'ratio.max', /image/,
+      this.imageDimensions, function (d, val) {
+        return (d.width / d.height) - upload.ratioToFloat(val) < 0.0001;
+      }));
+    promises.push(validateAsync('minRatio', 'ratio.min', /image/,
+      this.imageDimensions, function (d, val) {
+        return (d.width / d.height) - upload.ratioToFloat(val) > -0.0001;
+      }));
+    promises.push(validateAsync('maxDuration', 'duration.max', /audio|video/,
+      this.mediaDuration, function (d, val) {
+        return d <= upload.translateScalars(val);
+      }));
+    promises.push(validateAsync('minDuration', 'duration.min', /audio|video/,
+      this.mediaDuration, function (d, val) {
+        return d >= upload.translateScalars(val);
+      }));
+    promises.push(validateAsync('duration', null, /audio|video/,
+      function (file, val) {
+        return upload.emptyPromise(val);
+      }, function (r) {
+        return r;
+      }));
+
+    promises.push(validateAsync('validateAsyncFn', null, null,
+      function (file, val) {
+        return val;
+      }, function (r) {
+        return r === true || r === null || r === '';
+      }));
+
+    $q.all(promises).then(function () {
+
+      if (runAllValidation) {
+        for (var i = 0; i < files.length; i++) {
+          var file = files[i];
+          if (file.$error) {
+            files.splice(i--, 1);
+          }
+        }
+      }
+
+      runAllValidation = false;
+      validateSync('maxFiles', null, function (file, val, i) {
+        return prevLength + i < val;
+      });
+
+      deffer.resolve({'validFiles': files, 'invalidFiles': invalidFiles});
+    });
+    return deffer.promise;
+  };
+
+  upload.imageDimensions = function (file) {
+    if (file.$ngfWidth && file.$ngfHeight) {
+      var d = $q.defer();
+      $timeout(function () {
+        d.resolve({width: file.$ngfWidth, height: file.$ngfHeight});
+      });
+      return d.promise;
+    }
+    if (file.$ngfDimensionPromise) return file.$ngfDimensionPromise;
+
+    var deferred = $q.defer();
+    $timeout(function () {
+      if (file.type.indexOf('image') !== 0) {
+        deferred.reject('not image');
+        return;
+      }
+      upload.dataUrl(file).then(function (dataUrl) {
+        var img = angular.element('<img>').attr('src', dataUrl)
+          .css('visibility', 'hidden').css('position', 'fixed')
+          .css('max-width', 'none !important').css('max-height', 'none !important');
+
+        function success() {
+          var width = img[0].naturalWidth || img[0].clientWidth;
+          var height = img[0].naturalHeight || img[0].clientHeight;
+          img.remove();
+          file.$ngfWidth = width;
+          file.$ngfHeight = height;
+          deferred.resolve({width: width, height: height});
+        }
+
+        function error() {
+          img.remove();
+          deferred.reject('load error');
+        }
+
+        img.on('load', success);
+        img.on('error', error);
+
+        var secondsCounter = 0;
+        function checkLoadErrorInCaseOfNoCallback() {
+          $timeout(function () {
+            if (img[0].parentNode) {
+              if (img[0].clientWidth) {
+                success();
+              } else if (secondsCounter++ > 10) {
+                error();
+              } else {
+                checkLoadErrorInCaseOfNoCallback();
+              }
+            }
+          }, 1000);
+        }
+
+        checkLoadErrorInCaseOfNoCallback();
+
+        angular.element(document.getElementsByTagName('body')[0]).append(img);
+      }, function () {
+        deferred.reject('load error');
+      });
+    });
+
+    file.$ngfDimensionPromise = deferred.promise;
+    file.$ngfDimensionPromise['finally'](function () {
+      delete file.$ngfDimensionPromise;
+    });
+    return file.$ngfDimensionPromise;
+  };
+
+  upload.mediaDuration = function (file) {
+    if (file.$ngfDuration) {
+      var d = $q.defer();
+      $timeout(function () {
+        d.resolve(file.$ngfDuration);
+      });
+      return d.promise;
+    }
+    if (file.$ngfDurationPromise) return file.$ngfDurationPromise;
+
+    var deferred = $q.defer();
+    $timeout(function () {
+      if (file.type.indexOf('audio') !== 0 && file.type.indexOf('video') !== 0) {
+        deferred.reject('not media');
+        return;
+      }
+      upload.dataUrl(file).then(function (dataUrl) {
+        var el = angular.element(file.type.indexOf('audio') === 0 ? '<audio>' : '<video>')
+          .attr('src', dataUrl).css('visibility', 'none').css('position', 'fixed');
+
+        function success() {
+          var duration = el[0].duration;
+          file.$ngfDuration = duration;
+          el.remove();
+          deferred.resolve(duration);
+        }
+
+        function error() {
+          el.remove();
+          deferred.reject('load error');
+        }
+
+        el.on('loadedmetadata', success);
+        el.on('error', error);
+        var count = 0;
+
+        function checkLoadError() {
+          $timeout(function () {
+            if (el[0].parentNode) {
+              if (el[0].duration) {
+                success();
+              } else if (count > 10) {
+                error();
+              } else {
+                checkLoadError();
+              }
+            }
+          }, 1000);
+        }
+
+        checkLoadError();
+
+        angular.element(document.body).append(el);
+      }, function () {
+        deferred.reject('load error');
+      });
+    });
+
+    file.$ngfDurationPromise = deferred.promise;
+    file.$ngfDurationPromise['finally'](function () {
+      delete file.$ngfDurationPromise;
+    });
+    return file.$ngfDurationPromise;
+  };
+  return upload;
+}
+]);
+
+ngFileUpload.service('UploadResize', ['UploadValidate', '$q', function (UploadValidate, $q) {
+  var upload = UploadValidate;
+
+  /**
+   * Conserve aspect ratio of the original region. Useful when shrinking/enlarging
+   * images to fit into a certain area.
+   * Source:  http://stackoverflow.com/a/14731922
+   *
+   * @param {Number} srcWidth Source area width
+   * @param {Number} srcHeight Source area height
+   * @param {Number} maxWidth Nestable area maximum available width
+   * @param {Number} maxHeight Nestable area maximum available height
+   * @return {Object} { width, height }
+   */
+  var calculateAspectRatioFit = function (srcWidth, srcHeight, maxWidth, maxHeight, centerCrop) {
+    var ratio = centerCrop ? Math.max(maxWidth / srcWidth, maxHeight / srcHeight) :
+      Math.min(maxWidth / srcWidth, maxHeight / srcHeight);
+    return {
+      width: srcWidth * ratio, height: srcHeight * ratio,
+      marginX: srcWidth * ratio - maxWidth, marginY: srcHeight * ratio - maxHeight
+    };
+  };
+
+  // Extracted from https://github.com/romelgomez/angular-firebase-image-upload/blob/master/app/scripts/fileUpload.js#L89
+  var resize = function (imagen, width, height, quality, type, ratio, centerCrop, resizeIf) {
+    var deferred = $q.defer();
+    var canvasElement = document.createElement('canvas');
+    var imageElement = document.createElement('img');
+    imageElement.setAttribute('style', 'visibility:hidden;position:fixed;z-index:-100000');
+    document.body.appendChild(imageElement);
+
+    imageElement.onload = function () {
+      var imgWidth = imageElement.width, imgHeight = imageElement.height;
+      imageElement.parentNode.removeChild(imageElement);
+      if (resizeIf != null && resizeIf(imgWidth, imgHeight) === false) {
+        deferred.reject('resizeIf');
+        return;
+      }
+      try {
+        if (ratio) {
+          var ratioFloat = upload.ratioToFloat(ratio);
+          var imgRatio = imgWidth / imgHeight;
+          if (imgRatio < ratioFloat) {
+            width = imgWidth;
+            height = width / ratioFloat;
+          } else {
+            height = imgHeight;
+            width = height * ratioFloat;
+          }
+        }
+        if (!width) {
+          width = imgWidth;
+        }
+        if (!height) {
+          height = imgHeight;
+        }
+        var dimensions = calculateAspectRatioFit(imgWidth, imgHeight, width, height, centerCrop);
+        canvasElement.width = Math.min(dimensions.width, width);
+        canvasElement.height = Math.min(dimensions.height, height);
+        var context = canvasElement.getContext('2d');
+        context.drawImage(imageElement,
+          Math.min(0, -dimensions.marginX / 2), Math.min(0, -dimensions.marginY / 2),
+          dimensions.width, dimensions.height);
+        deferred.resolve(canvasElement.toDataURL(type || 'image/WebP', quality || 0.934));
+      } catch (e) {
+        deferred.reject(e);
+      }
+    };
+    imageElement.onerror = function () {
+      imageElement.parentNode.removeChild(imageElement);
+      deferred.reject();
+    };
+    imageElement.src = imagen;
+    return deferred.promise;
+  };
+
+  upload.dataUrltoBlob = function (dataurl, name, origSize) {
+    var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],
+      bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
+    while (n--) {
+      u8arr[n] = bstr.charCodeAt(n);
+    }
+    var blob = new window.Blob([u8arr], {type: mime});
+    blob.name = name;
+    blob.$ngfOrigSize = origSize;
+    return blob;
+  };
+
+  upload.isResizeSupported = function () {
+    var elem = document.createElement('canvas');
+    return window.atob && elem.getContext && elem.getContext('2d') && window.Blob;
+  };
+
+  if (upload.isResizeSupported()) {
+    // add name getter to the blob constructor prototype
+    Object.defineProperty(window.Blob.prototype, 'name', {
+      get: function () {
+        return this.$ngfName;
+      },
+      set: function (v) {
+        this.$ngfName = v;
+      },
+      configurable: true
+    });
+  }
+
+  upload.resize = function (file, options) {
+    if (file.type.indexOf('image') !== 0) return upload.emptyPromise(file);
+
+    var deferred = $q.defer();
+    upload.dataUrl(file, true).then(function (url) {
+      resize(url, options.width, options.height, options.quality, options.type || file.type,
+        options.ratio, options.centerCrop, options.resizeIf)
+        .then(function (dataUrl) {
+          if (file.type === 'image/jpeg' && options.restoreExif !== false) {
+            try {
+              dataUrl = upload.restoreExif(url, dataUrl);
+            } catch (e) {
+              setTimeout(function () {throw e;}, 1);
+            }
+          }
+          try {
+            var blob = upload.dataUrltoBlob(dataUrl, file.name, file.size);
+            deferred.resolve(blob);
+          } catch (e) {
+            deferred.reject(e);
+          }
+        }, function (r) {
+          if (r === 'resizeIf') {
+            deferred.resolve(file);
+          }
+          deferred.reject(r);
+        });
+    }, function (e) {
+      deferred.reject(e);
+    });
+    return deferred.promise;
+  };
+
+  return upload;
+}]);
+
+(function () {
+  ngFileUpload.directive('ngfDrop', ['$parse', '$timeout', '$window', 'Upload', '$http', '$q',
+    function ($parse, $timeout, $window, Upload, $http, $q) {
+      return {
+        restrict: 'AEC',
+        require: '?ngModel',
+        link: function (scope, elem, attr, ngModel) {
+          linkDrop(scope, elem, attr, ngModel, $parse, $timeout, $window, Upload, $http, $q);
+        }
+      };
+    }]);
+
+  ngFileUpload.directive('ngfNoFileDrop', function () {
+    return function (scope, elem) {
+      if (dropAvailable()) elem.css('display', 'none');
+    };
+  });
+
+  ngFileUpload.directive('ngfDropAvailable', ['$parse', '$timeout', 'Upload', function ($parse, $timeout, Upload) {
+    return function (scope, elem, attr) {
+      if (dropAvailable()) {
+        var model = $parse(Upload.attrGetter('ngfDropAvailable', attr));
+        $timeout(function () {
+          model(scope);
+          if (model.assign) {
+            model.assign(scope, true);
+          }
+        });
+      }
+    };
+  }]);
+
+  function linkDrop(scope, elem, attr, ngModel, $parse, $timeout, $window, upload, $http, $q) {
+    var available = dropAvailable();
+
+    var attrGetter = function (name, scope, params) {
+      return upload.attrGetter(name, attr, scope, params);
+    };
+
+    if (attrGetter('dropAvailable')) {
+      $timeout(function () {
+        if (scope[attrGetter('dropAvailable')]) {
+          scope[attrGetter('dropAvailable')].value = available;
+        } else {
+          scope[attrGetter('dropAvailable')] = available;
+        }
+      });
+    }
+    if (!available) {
+      if (attrGetter('ngfHideOnDropNotAvailable', scope) === true) {
+        elem.css('display', 'none');
+      }
+      return;
+    }
+
+    function isDisabled() {
+      return elem.attr('disabled') || attrGetter('ngfDropDisabled', scope);
+    }
+
+    if (attrGetter('ngfSelect') == null) {
+      upload.registerModelChangeValidator(ngModel, attr, scope);
+    }
+
+    var leaveTimeout = null;
+    var stopPropagation = $parse(attrGetter('ngfStopPropagation'));
+    var dragOverDelay = 1;
+    var actualDragOverClass;
+
+    elem[0].addEventListener('dragover', function (evt) {
+      if (isDisabled() || !upload.shouldUpdateOn('drop', attr, scope)) return;
+      evt.preventDefault();
+      if (stopPropagation(scope)) evt.stopPropagation();
+      // handling dragover events from the Chrome download bar
+      if (navigator.userAgent.indexOf('Chrome') > -1) {
+        var b = evt.dataTransfer.effectAllowed;
+        evt.dataTransfer.dropEffect = ('move' === b || 'linkMove' === b) ? 'move' : 'copy';
+      }
+      $timeout.cancel(leaveTimeout);
+      if (!actualDragOverClass) {
+        actualDragOverClass = 'C';
+        calculateDragOverClass(scope, attr, evt, function (clazz) {
+          actualDragOverClass = clazz;
+          elem.addClass(actualDragOverClass);
+          attrGetter('ngfDrag', scope, {$isDragging: true, $class: actualDragOverClass, $event: evt});
+        });
+      }
+    }, false);
+    elem[0].addEventListener('dragenter', function (evt) {
+      if (isDisabled() || !upload.shouldUpdateOn('drop', attr, scope)) return;
+      evt.preventDefault();
+      if (stopPropagation(scope)) evt.stopPropagation();
+    }, false);
+    elem[0].addEventListener('dragleave', function (evt) {
+      if (isDisabled() || !upload.shouldUpdateOn('drop', attr, scope)) return;
+      evt.preventDefault();
+      if (stopPropagation(scope)) evt.stopPropagation();
+      leaveTimeout = $timeout(function () {
+        if (actualDragOverClass) elem.removeClass(actualDragOverClass);
+        actualDragOverClass = null;
+        attrGetter('ngfDrag', scope, {$isDragging: false, $event: evt});
+      }, dragOverDelay || 100);
+    }, false);
+    elem[0].addEventListener('drop', function (evt) {
+      if (isDisabled() || !upload.shouldUpdateOn('drop', attr, scope)) return;
+      evt.preventDefault();
+      if (stopPropagation(scope)) evt.stopPropagation();
+      if (actualDragOverClass) elem.removeClass(actualDragOverClass);
+      actualDragOverClass = null;
+      extractFilesAndUpdateModel(evt.dataTransfer, evt, 'dropUrl');
+    }, false);
+    elem[0].addEventListener('paste', function (evt) {
+      if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1 &&
+        attrGetter('ngfEnableFirefoxPaste', scope)) {
+        evt.preventDefault();
+      }
+      if (isDisabled() || !upload.shouldUpdateOn('paste', attr, scope)) return;
+      extractFilesAndUpdateModel(evt.clipboardData || evt.originalEvent.clipboardData, evt, 'pasteUrl');
+    }, false);
+
+    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1 &&
+      attrGetter('ngfEnableFirefoxPaste', scope)) {
+      elem.attr('contenteditable', true);
+      elem.on('keypress', function (e) {
+        if (!e.metaKey && !e.ctrlKey) {
+          e.preventDefault();
+        }
+      });
+    }
+
+    function extractFilesAndUpdateModel(source, evt, updateOnType) {
+      if (!source) return;
+      // html needs to be calculated on the same process otherwise the data will be wiped
+      // after promise resolve or setTimeout.
+      var html;
+      try {
+        html = source && source.getData && source.getData('text/html');
+      } catch (e) {/* Fix IE11 that throw error calling getData */
+      }
+      extractFiles(source.items, source.files, attrGetter('ngfAllowDir', scope) !== false,
+        attrGetter('multiple') || attrGetter('ngfMultiple', scope)).then(function (files) {
+        if (files.length) {
+          updateModel(files, evt);
+        } else {
+          extractFilesFromHtml(updateOnType, html).then(function (files) {
+            updateModel(files, evt);
+          });
+        }
+      });
+    }
+
+    function updateModel(files, evt) {
+      upload.updateModel(ngModel, attr, scope, attrGetter('ngfChange') || attrGetter('ngfDrop'), files, evt);
+    }
+
+    function extractFilesFromHtml(updateOn, html) {
+      if (!upload.shouldUpdateOn(updateOn, attr, scope) || typeof html !== 'string') return upload.rejectPromise([]);
+      var urls = [];
+      html.replace(/<(img src|img [^>]* src) *=\"([^\"]*)\"/gi, function (m, n, src) {
+        urls.push(src);
+      });
+      var promises = [], files = [];
+      if (urls.length) {
+        angular.forEach(urls, function (url) {
+          promises.push(upload.urlToBlob(url).then(function (blob) {
+            files.push(blob);
+          }));
+        });
+        var defer = $q.defer();
+        $q.all(promises).then(function () {
+          defer.resolve(files);
+        }, function (e) {
+          defer.reject(e);
+        });
+        return defer.promise;
+      }
+      return upload.emptyPromise();
+    }
+
+    function calculateDragOverClass(scope, attr, evt, callback) {
+      var obj = attrGetter('ngfDragOverClass', scope, {$event: evt}), dClass = 'dragover';
+      if (angular.isString(obj)) {
+        dClass = obj;
+      } else if (obj) {
+        if (obj.delay) dragOverDelay = obj.delay;
+        if (obj.accept || obj.reject) {
+          var items = evt.dataTransfer.items;
+          if (items == null || !items.length) {
+            dClass = obj.accept;
+          } else {
+            var pattern = obj.pattern || attrGetter('ngfPattern', scope, {$event: evt});
+            var len = items.length;
+            while (len--) {
+              if (!upload.validatePattern(items[len], pattern)) {
+                dClass = obj.reject;
+                break;
+              } else {
+                dClass = obj.accept;
+              }
+            }
+          }
+        }
+      }
+      callback(dClass);
+    }
+
+    function extractFiles(items, fileList, allowDir, multiple) {
+      var maxFiles = upload.getValidationAttr(attr, scope, 'maxFiles');
+      if (maxFiles == null) {
+        maxFiles = Number.MAX_VALUE;
+      }
+      var maxTotalSize = upload.getValidationAttr(attr, scope, 'maxTotalSize');
+      if (maxTotalSize == null) {
+        maxTotalSize = Number.MAX_VALUE;
+      }
+      var includeDir = attrGetter('ngfIncludeDir', scope);
+      var files = [], totalSize = 0;
+
+      function traverseFileTree(entry, path) {
+        var defer = $q.defer();
+        if (entry != null) {
+          if (entry.isDirectory) {
+            var promises = [upload.emptyPromise()];
+            if (includeDir) {
+              var file = {type: 'directory'};
+              file.name = file.path = (path || '') + entry.name;
+              files.push(file);
+            }
+            var dirReader = entry.createReader();
+            var entries = [];
+            var readEntries = function () {
+              dirReader.readEntries(function (results) {
+                try {
+                  if (!results.length) {
+                    angular.forEach(entries.slice(0), function (e) {
+                      if (files.length <= maxFiles && totalSize <= maxTotalSize) {
+                        promises.push(traverseFileTree(e, (path ? path : '') + entry.name + '/'));
+                      }
+                    });
+                    $q.all(promises).then(function () {
+                      defer.resolve();
+                    }, function (e) {
+                      defer.reject(e);
+                    });
+                  } else {
+                    entries = entries.concat(Array.prototype.slice.call(results || [], 0));
+                    readEntries();
+                  }
+                } catch (e) {
+                  defer.reject(e);
+                }
+              }, function (e) {
+                defer.reject(e);
+              });
+            };
+            readEntries();
+          } else {
+            entry.file(function (file) {
+              try {
+                file.path = (path ? path : '') + file.name;
+                if (includeDir) {
+                  file = upload.rename(file, file.path);
+                }
+                files.push(file);
+                totalSize += file.size;
+                defer.resolve();
+              } catch (e) {
+                defer.reject(e);
+              }
+            }, function (e) {
+              defer.reject(e);
+            });
+          }
+        }
+        return defer.promise;
+      }
+
+      var promises = [upload.emptyPromise()];
+
+      if (items && items.length > 0 && $window.location.protocol !== 'file:') {
+        for (var i = 0; i < items.length; i++) {
+          if (items[i].webkitGetAsEntry && items[i].webkitGetAsEntry() && items[i].webkitGetAsEntry().isDirectory) {
+            var entry = items[i].webkitGetAsEntry();
+            if (entry.isDirectory && !allowDir) {
+              continue;
+            }
+            if (entry != null) {
+              promises.push(traverseFileTree(entry));
+            }
+          } else {
+            var f = items[i].getAsFile();
+            if (f != null) {
+              files.push(f);
+              totalSize += f.size;
+            }
+          }
+          if (files.length > maxFiles || totalSize > maxTotalSize ||
+            (!multiple && files.length > 0)) break;
+        }
+      } else {
+        if (fileList != null) {
+          for (var j = 0; j < fileList.length; j++) {
+            var file = fileList.item(j);
+            if (file.type || file.size > 0) {
+              files.push(file);
+              totalSize += file.size;
+            }
+            if (files.length > maxFiles || totalSize > maxTotalSize ||
+              (!multiple && files.length > 0)) break;
+          }
+        }
+      }
+
+      var defer = $q.defer();
+      $q.all(promises).then(function () {
+        if (!multiple && !includeDir && files.length) {
+          var i = 0;
+          while (files[i] && files[i].type === 'directory') i++;
+          defer.resolve([files[i]]);
+        } else {
+          defer.resolve(files);
+        }
+      }, function (e) {
+        defer.reject(e);
+      });
+
+      return defer.promise;
+    }
+  }
+
+  function dropAvailable() {
+    var div = document.createElement('div');
+    return ('draggable' in div) && ('ondrop' in div) && !/Edge\/12./i.test(navigator.userAgent);
+  }
+
+})();
+
+// customized version of https://github.com/exif-js/exif-js
+ngFileUpload.service('UploadExif', ['UploadResize', '$q', function (UploadResize, $q) {
+  var upload = UploadResize;
+
+  upload.isExifSupported = function () {
+    return window.FileReader && new FileReader().readAsArrayBuffer && upload.isResizeSupported();
+  };
+
+  function applyTransform(ctx, orientation, width, height) {
+    switch (orientation) {
+      case 2:
+        return ctx.transform(-1, 0, 0, 1, width, 0);
+      case 3:
+        return ctx.transform(-1, 0, 0, -1, width, height);
+      case 4:
+        return ctx.transform(1, 0, 0, -1, 0, height);
+      case 5:
+        return ctx.transform(0, 1, 1, 0, 0, 0);
+      case 6:
+        return ctx.transform(0, 1, -1, 0, height, 0);
+      case 7:
+        return ctx.transform(0, -1, -1, 0, height, width);
+      case 8:
+        return ctx.transform(0, -1, 1, 0, 0, width);
+    }
+  }
+
+  upload.readOrientation = function (file) {
+    var defer = $q.defer();
+    var reader = new FileReader();
+    var slicedFile = file.slice ? file.slice(0, 64 * 1024) : file;
+    reader.readAsArrayBuffer(slicedFile);
+    reader.onerror = function (e) {
+      return defer.reject(e);
+    };
+    reader.onload = function (e) {
+      var result = {orientation: 1};
+      var view = new DataView(this.result);
+      if (view.getUint16(0, false) !== 0xFFD8) return defer.resolve(result);
+
+      var length = view.byteLength,
+        offset = 2;
+      while (offset < length) {
+        var marker = view.getUint16(offset, false);
+        offset += 2;
+        if (marker === 0xFFE1) {
+          if (view.getUint32(offset += 2, false) !== 0x45786966) return defer.resolve(result);
+
+          var little = view.getUint16(offset += 6, false) === 0x4949;
+          offset += view.getUint32(offset + 4, little);
+          var tags = view.getUint16(offset, little);
+          offset += 2;
+          for (var i = 0; i < tags; i++)
+            if (view.getUint16(offset + (i * 12), little) === 0x0112) {
+              var orientation = view.getUint16(offset + (i * 12) + 8, little);
+              if (orientation >= 2 && orientation <= 8) {
+                view.setUint16(offset + (i * 12) + 8, 1, little);
+                result.fixedArrayBuffer = e.target.result;
+              }
+              result.orientation = orientation;
+              return defer.resolve(result);
+            }
+        } else if ((marker & 0xFF00) !== 0xFF00) break;
+        else offset += view.getUint16(offset, false);
+      }
+      return defer.resolve(result);
+    };
+    return defer.promise;
+  };
+
+  function arrayBufferToBase64(buffer) {
+    var binary = '';
+    var bytes = new Uint8Array(buffer);
+    var len = bytes.byteLength;
+    for (var i = 0; i < len; i++) {
+      binary += String.fromCharCode(bytes[i]);
+    }
+    return window.btoa(binary);
+  }
+
+  upload.applyExifRotation = function (file) {
+    if (file.type.indexOf('image/jpeg') !== 0) {
+      return upload.emptyPromise(file);
+    }
+
+    var deferred = $q.defer();
+    upload.readOrientation(file).then(function (result) {
+      if (result.orientation < 2 || result.orientation > 8) {
+        return deferred.resolve(file);
+      }
+      upload.dataUrl(file, true).then(function (url) {
+        var canvas = document.createElement('canvas');
+        var img = document.createElement('img');
+
+        img.onload = function () {
+          try {
+            canvas.width = result.orientation > 4 ? img.height : img.width;
+            canvas.height = result.orientation > 4 ? img.width : img.height;
+            var ctx = canvas.getContext('2d');
+            applyTransform(ctx, result.orientation, img.width, img.height);
+            ctx.drawImage(img, 0, 0);
+            var dataUrl = canvas.toDataURL(file.type || 'image/WebP', 0.934);
+            dataUrl = upload.restoreExif(arrayBufferToBase64(result.fixedArrayBuffer), dataUrl);
+            var blob = upload.dataUrltoBlob(dataUrl, file.name);
+            deferred.resolve(blob);
+          } catch (e) {
+            return deferred.reject(e);
+          }
+        };
+        img.onerror = function () {
+          deferred.reject();
+        };
+        img.src = url;
+      }, function (e) {
+        deferred.reject(e);
+      });
+    }, function (e) {
+      deferred.reject(e);
+    });
+    return deferred.promise;
+  };
+
+  upload.restoreExif = function (orig, resized) {
+    var ExifRestorer = {};
+
+    ExifRestorer.KEY_STR = 'ABCDEFGHIJKLMNOP' +
+      'QRSTUVWXYZabcdef' +
+      'ghijklmnopqrstuv' +
+      'wxyz0123456789+/' +
+      '=';
+
+    ExifRestorer.encode64 = function (input) {
+      var output = '',
+        chr1, chr2, chr3 = '',
+        enc1, enc2, enc3, enc4 = '',
+        i = 0;
+
+      do {
+        chr1 = input[i++];
+        chr2 = input[i++];
+        chr3 = input[i++];
+
+        enc1 = chr1 >> 2;
+        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
+        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
+        enc4 = chr3 & 63;
+
+        if (isNaN(chr2)) {
+          enc3 = enc4 = 64;
+        } else if (isNaN(chr3)) {
+          enc4 = 64;
+        }
+
+        output = output +
+          this.KEY_STR.charAt(enc1) +
+          this.KEY_STR.charAt(enc2) +
+          this.KEY_STR.charAt(enc3) +
+          this.KEY_STR.charAt(enc4);
+        chr1 = chr2 = chr3 = '';
+        enc1 = enc2 = enc3 = enc4 = '';
+      } while (i < input.length);
+
+      return output;
+    };
+
+    ExifRestorer.restore = function (origFileBase64, resizedFileBase64) {
+      if (origFileBase64.match('data:image/jpeg;base64,')) {
+        origFileBase64 = origFileBase64.replace('data:image/jpeg;base64,', '');
+      }
+
+      var rawImage = this.decode64(origFileBase64);
+      var segments = this.slice2Segments(rawImage);
+
+      var image = this.exifManipulation(resizedFileBase64, segments);
+
+      return 'data:image/jpeg;base64,' + this.encode64(image);
+    };
+
+
+    ExifRestorer.exifManipulation = function (resizedFileBase64, segments) {
+      var exifArray = this.getExifArray(segments),
+        newImageArray = this.insertExif(resizedFileBase64, exifArray);
+      return new Uint8Array(newImageArray);
+    };
+
+
+    ExifRestorer.getExifArray = function (segments) {
+      var seg;
+      for (var x = 0; x < segments.length; x++) {
+        seg = segments[x];
+        if (seg[0] === 255 & seg[1] === 225) //(ff e1)
+        {
+          return seg;
+        }
+      }
+      return [];
+    };
+
+
+    ExifRestorer.insertExif = function (resizedFileBase64, exifArray) {
+      var imageData = resizedFileBase64.replace('data:image/jpeg;base64,', ''),
+        buf = this.decode64(imageData),
+        separatePoint = buf.indexOf(255, 3),
+        mae = buf.slice(0, separatePoint),
+        ato = buf.slice(separatePoint),
+        array = mae;
+
+      array = array.concat(exifArray);
+      array = array.concat(ato);
+      return array;
+    };
+
+
+    ExifRestorer.slice2Segments = function (rawImageArray) {
+      var head = 0,
+        segments = [];
+
+      while (1) {
+        if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 218) {
+          break;
+        }
+        if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 216) {
+          head += 2;
+        }
+        else {
+          var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],
+            endPoint = head + length + 2,
+            seg = rawImageArray.slice(head, endPoint);
+          segments.push(seg);
+          head = endPoint;
+        }
+        if (head > rawImageArray.length) {
+          break;
+        }
+      }
+
+      return segments;
+    };
+
+
+    ExifRestorer.decode64 = function (input) {
+      var chr1, chr2, chr3 = '',
+        enc1, enc2, enc3, enc4 = '',
+        i = 0,
+        buf = [];
+
+      // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
+      var base64test = /[^A-Za-z0-9\+\/\=]/g;
+      if (base64test.exec(input)) {
+        console.log('There were invalid base64 characters in the input text.\n' +
+          'Valid base64 characters are A-Z, a-z, 0-9, ' + ', ' / ',and "="\n' +
+          'Expect errors in decoding.');
+      }
+      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
+
+      do {
+        enc1 = this.KEY_STR.indexOf(input.charAt(i++));
+        enc2 = this.KEY_STR.indexOf(input.charAt(i++));
+        enc3 = this.KEY_STR.indexOf(input.charAt(i++));
+        enc4 = this.KEY_STR.indexOf(input.charAt(i++));
+
+        chr1 = (enc1 << 2) | (enc2 >> 4);
+        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
+        chr3 = ((enc3 & 3) << 6) | enc4;
+
+        buf.push(chr1);
+
+        if (enc3 !== 64) {
+          buf.push(chr2);
+        }
+        if (enc4 !== 64) {
+          buf.push(chr3);
+        }
+
+        chr1 = chr2 = chr3 = '';
+        enc1 = enc2 = enc3 = enc4 = '';
+
+      } while (i < input.length);
+
+      return buf;
+    };
+
+    return ExifRestorer.restore(orig, resized);  //<= EXIF
+  };
+
+  return upload;
+}]);
+
diff --git a/src/main/resources/static/lib/ng-img-crop.css b/src/main/resources/static/lib/ng-img-crop.css
new file mode 100644
index 0000000..61cc209
--- /dev/null
+++ b/src/main/resources/static/lib/ng-img-crop.css
@@ -0,0 +1,18 @@
+/* line 1, ../../source/scss/ng-img-crop.scss */
+img-crop {
+  width: 100%;
+  height: 100%;
+  display: block;
+  position: relative;
+  overflow: hidden;
+}
+/* line 7, ../../source/scss/ng-img-crop.scss */
+img-crop canvas {
+  display: block;
+  position: absolute;
+  top: 50%;
+  left: 50%;
+  outline: none;
+  -webkit-tap-highlight-color: rgba(255, 255, 255, 0);
+  /* mobile webkit */
+}
diff --git a/src/main/resources/static/lib/ng-img-crop.js b/src/main/resources/static/lib/ng-img-crop.js
new file mode 100644
index 0000000..da01172
--- /dev/null
+++ b/src/main/resources/static/lib/ng-img-crop.js
@@ -0,0 +1,1879 @@
+/*!
+ * ngImgCrop v0.3.2
+ * https://github.com/alexk111/ngImgCrop
+ *
+ * Copyright (c) 2014 Alex Kaul
+ * License: MIT
+ *
+ * Generated at Wednesday, December 3rd, 2014, 3:54:12 PM
+ */
+(function() {
+'use strict';
+
+var crop = angular.module('ngImgCrop', []);
+
+crop.factory('cropAreaCircle', ['cropArea', function(CropArea) {
+  var CropAreaCircle = function() {
+    CropArea.apply(this, arguments);
+
+    this._boxResizeBaseSize = 20;
+    this._boxResizeNormalRatio = 0.9;
+    this._boxResizeHoverRatio = 1.2;
+    this._iconMoveNormalRatio = 0.9;
+    this._iconMoveHoverRatio = 1.2;
+
+    this._boxResizeNormalSize = this._boxResizeBaseSize*this._boxResizeNormalRatio;
+    this._boxResizeHoverSize = this._boxResizeBaseSize*this._boxResizeHoverRatio;
+
+    this._posDragStartX=0;
+    this._posDragStartY=0;
+    this._posResizeStartX=0;
+    this._posResizeStartY=0;
+    this._posResizeStartSize=0;
+
+    this._boxResizeIsHover = false;
+    this._areaIsHover = false;
+    this._boxResizeIsDragging = false;
+    this._areaIsDragging = false;
+  };
+
+  CropAreaCircle.prototype = new CropArea();
+
+  CropAreaCircle.prototype._calcCirclePerimeterCoords=function(angleDegrees) {
+    var hSize=this._size/2;
+    var angleRadians=angleDegrees * (Math.PI / 180),
+        circlePerimeterX=this._x + hSize * Math.cos(angleRadians),
+        circlePerimeterY=this._y + hSize * Math.sin(angleRadians);
+    return [circlePerimeterX, circlePerimeterY];
+  };
+
+  CropAreaCircle.prototype._calcResizeIconCenterCoords=function() {
+    return this._calcCirclePerimeterCoords(-45);
+  };
+
+  CropAreaCircle.prototype._isCoordWithinArea=function(coord) {
+    return Math.sqrt((coord[0]-this._x)*(coord[0]-this._x) + (coord[1]-this._y)*(coord[1]-this._y)) < this._size/2;
+  };
+  CropAreaCircle.prototype._isCoordWithinBoxResize=function(coord) {
+    var resizeIconCenterCoords=this._calcResizeIconCenterCoords();
+    var hSize=this._boxResizeHoverSize/2;
+    return(coord[0] > resizeIconCenterCoords[0] - hSize && coord[0] < resizeIconCenterCoords[0] + hSize &&
+           coord[1] > resizeIconCenterCoords[1] - hSize && coord[1] < resizeIconCenterCoords[1] + hSize);
+  };
+
+  CropAreaCircle.prototype._drawArea=function(ctx,centerCoords,size){
+    ctx.arc(centerCoords[0],centerCoords[1],size/2,0,2*Math.PI);
+  };
+
+  CropAreaCircle.prototype.draw=function() {
+    CropArea.prototype.draw.apply(this, arguments);
+
+    // draw move icon
+    this._cropCanvas.drawIconMove([this._x,this._y], this._areaIsHover?this._iconMoveHoverRatio:this._iconMoveNormalRatio);
+
+    // draw resize cubes
+    this._cropCanvas.drawIconResizeBoxNESW(this._calcResizeIconCenterCoords(), this._boxResizeBaseSize, this._boxResizeIsHover?this._boxResizeHoverRatio:this._boxResizeNormalRatio);
+  };
+
+  CropAreaCircle.prototype.processMouseMove=function(mouseCurX, mouseCurY) {
+    var cursor='default';
+    var res=false;
+
+    this._boxResizeIsHover = false;
+    this._areaIsHover = false;
+
+    if (this._areaIsDragging) {
+      this._x = mouseCurX - this._posDragStartX;
+      this._y = mouseCurY - this._posDragStartY;
+      this._areaIsHover = true;
+      cursor='move';
+      res=true;
+      this._events.trigger('area-move');
+    } else if (this._boxResizeIsDragging) {
+        cursor = 'nesw-resize';
+        var iFR, iFX, iFY;
+        iFX = mouseCurX - this._posResizeStartX;
+        iFY = this._posResizeStartY - mouseCurY;
+        if(iFX>iFY) {
+          iFR = this._posResizeStartSize + iFY*2;
+        } else {
+          iFR = this._posResizeStartSize + iFX*2;
+        }
+
+        this._size = Math.max(this._minSize, iFR);
+        this._boxResizeIsHover = true;
+        res=true;
+        this._events.trigger('area-resize');
+    } else if (this._isCoordWithinBoxResize([mouseCurX,mouseCurY])) {
+        cursor = 'nesw-resize';
+        this._areaIsHover = false;
+        this._boxResizeIsHover = true;
+        res=true;
+    } else if(this._isCoordWithinArea([mouseCurX,mouseCurY])) {
+        cursor = 'move';
+        this._areaIsHover = true;
+        res=true;
+    }
+
+    this._dontDragOutside();
+    angular.element(this._ctx.canvas).css({'cursor': cursor});
+
+    return res;
+  };
+
+  CropAreaCircle.prototype.processMouseDown=function(mouseDownX, mouseDownY) {
+    if (this._isCoordWithinBoxResize([mouseDownX,mouseDownY])) {
+      this._areaIsDragging = false;
+      this._areaIsHover = false;
+      this._boxResizeIsDragging = true;
+      this._boxResizeIsHover = true;
+      this._posResizeStartX=mouseDownX;
+      this._posResizeStartY=mouseDownY;
+      this._posResizeStartSize = this._size;
+      this._events.trigger('area-resize-start');
+    } else if (this._isCoordWithinArea([mouseDownX,mouseDownY])) {
+      this._areaIsDragging = true;
+      this._areaIsHover = true;
+      this._boxResizeIsDragging = false;
+      this._boxResizeIsHover = false;
+      this._posDragStartX = mouseDownX - this._x;
+      this._posDragStartY = mouseDownY - this._y;
+      this._events.trigger('area-move-start');
+    }
+  };
+
+  CropAreaCircle.prototype.processMouseUp=function(/*mouseUpX, mouseUpY*/) {
+    if(this._areaIsDragging) {
+      this._areaIsDragging = false;
+      this._events.trigger('area-move-end');
+    }
+    if(this._boxResizeIsDragging) {
+      this._boxResizeIsDragging = false;
+      this._events.trigger('area-resize-end');
+    }
+    this._areaIsHover = false;
+    this._boxResizeIsHover = false;
+
+    this._posDragStartX = 0;
+    this._posDragStartY = 0;
+  };
+
+  return CropAreaCircle;
+}]);
+
+
+
+crop.factory('cropAreaSquare', ['cropArea', function(CropArea) {
+  var CropAreaSquare = function() {
+    CropArea.apply(this, arguments);
+
+    this._resizeCtrlBaseRadius = 10;
+    this._resizeCtrlNormalRatio = 0.75;
+    this._resizeCtrlHoverRatio = 1;
+    this._iconMoveNormalRatio = 0.9;
+    this._iconMoveHoverRatio = 1.2;
+
+    this._resizeCtrlNormalRadius = this._resizeCtrlBaseRadius*this._resizeCtrlNormalRatio;
+    this._resizeCtrlHoverRadius = this._resizeCtrlBaseRadius*this._resizeCtrlHoverRatio;
+
+    this._posDragStartX=0;
+    this._posDragStartY=0;
+    this._posResizeStartX=0;
+    this._posResizeStartY=0;
+    this._posResizeStartSize=0;
+
+    this._resizeCtrlIsHover = -1;
+    this._areaIsHover = false;
+    this._resizeCtrlIsDragging = -1;
+    this._areaIsDragging = false;
+  };
+
+  CropAreaSquare.prototype = new CropArea();
+
+  CropAreaSquare.prototype._calcSquareCorners=function() {
+    var hSize=this._size/2;
+    return [
+      [this._x-hSize, this._y-hSize],
+      [this._x+hSize, this._y-hSize],
+      [this._x-hSize, this._y+hSize],
+      [this._x+hSize, this._y+hSize]
+    ];
+  };
+
+  CropAreaSquare.prototype._calcSquareDimensions=function() {
+    var hSize=this._size/2;
+    return {
+      left: this._x-hSize,
+      top: this._y-hSize,
+      right: this._x+hSize,
+      bottom: this._y+hSize
+    };
+  };
+
+  CropAreaSquare.prototype._isCoordWithinArea=function(coord) {
+    var squareDimensions=this._calcSquareDimensions();
+    return (coord[0]>=squareDimensions.left&&coord[0]<=squareDimensions.right&&coord[1]>=squareDimensions.top&&coord[1]<=squareDimensions.bottom);
+  };
+
+  CropAreaSquare.prototype._isCoordWithinResizeCtrl=function(coord) {
+    var resizeIconsCenterCoords=this._calcSquareCorners();
+    var res=-1;
+    for(var i=0,len=resizeIconsCenterCoords.length;i<len;i++) {
+      var resizeIconCenterCoords=resizeIconsCenterCoords[i];
+      if(coord[0] > resizeIconCenterCoords[0] - this._resizeCtrlHoverRadius && coord[0] < resizeIconCenterCoords[0] + this._resizeCtrlHoverRadius &&
+         coord[1] > resizeIconCenterCoords[1] - this._resizeCtrlHoverRadius && coord[1] < resizeIconCenterCoords[1] + this._resizeCtrlHoverRadius) {
+        res=i;
+        break;
+      }
+    }
+    return res;
+  };
+
+  CropAreaSquare.prototype._drawArea=function(ctx,centerCoords,size){
+    var hSize=size/2;
+    ctx.rect(centerCoords[0]-hSize,centerCoords[1]-hSize,size,size);
+  };
+
+  CropAreaSquare.prototype.draw=function() {
+    CropArea.prototype.draw.apply(this, arguments);
+
+    // draw move icon
+    this._cropCanvas.drawIconMove([this._x,this._y], this._areaIsHover?this._iconMoveHoverRatio:this._iconMoveNormalRatio);
+
+    // draw resize cubes
+    var resizeIconsCenterCoords=this._calcSquareCorners();
+    for(var i=0,len=resizeIconsCenterCoords.length;i<len;i++) {
+      var resizeIconCenterCoords=resizeIconsCenterCoords[i];
+      this._cropCanvas.drawIconResizeCircle(resizeIconCenterCoords, this._resizeCtrlBaseRadius, this._resizeCtrlIsHover===i?this._resizeCtrlHoverRatio:this._resizeCtrlNormalRatio);
+    }
+  };
+
+  CropAreaSquare.prototype.processMouseMove=function(mouseCurX, mouseCurY) {
+    var cursor='default';
+    var res=false;
+
+    this._resizeCtrlIsHover = -1;
+    this._areaIsHover = false;
+
+    if (this._areaIsDragging) {
+      this._x = mouseCurX - this._posDragStartX;
+      this._y = mouseCurY - this._posDragStartY;
+      this._areaIsHover = true;
+      cursor='move';
+      res=true;
+      this._events.trigger('area-move');
+    } else if (this._resizeCtrlIsDragging>-1) {
+      var xMulti, yMulti;
+      switch(this._resizeCtrlIsDragging) {
+        case 0: // Top Left
+          xMulti=-1;
+          yMulti=-1;
+          cursor = 'nwse-resize';
+          break;
+        case 1: // Top Right
+          xMulti=1;
+          yMulti=-1;
+          cursor = 'nesw-resize';
+          break;
+        case 2: // Bottom Left
+          xMulti=-1;
+          yMulti=1;
+          cursor = 'nesw-resize';
+          break;
+        case 3: // Bottom Right
+          xMulti=1;
+          yMulti=1;
+          cursor = 'nwse-resize';
+          break;
+      }
+      var iFX = (mouseCurX - this._posResizeStartX)*xMulti;
+      var iFY = (mouseCurY - this._posResizeStartY)*yMulti;
+      var iFR;
+      if(iFX>iFY) {
+        iFR = this._posResizeStartSize + iFY;
+      } else {
+        iFR = this._posResizeStartSize + iFX;
+      }
+      var wasSize=this._size;
+      this._size = Math.max(this._minSize, iFR);
+      var posModifier=(this._size-wasSize)/2;
+      this._x+=posModifier*xMulti;
+      this._y+=posModifier*yMulti;
+      this._resizeCtrlIsHover = this._resizeCtrlIsDragging;
+      res=true;
+      this._events.trigger('area-resize');
+    } else {
+      var hoveredResizeBox=this._isCoordWithinResizeCtrl([mouseCurX,mouseCurY]);
+      if (hoveredResizeBox>-1) {
+        switch(hoveredResizeBox) {
+          case 0:
+            cursor = 'nwse-resize';
+            break;
+          case 1:
+            cursor = 'nesw-resize';
+            break;
+          case 2:
+            cursor = 'nesw-resize';
+            break;
+          case 3:
+            cursor = 'nwse-resize';
+            break;
+        }
+        this._areaIsHover = false;
+        this._resizeCtrlIsHover = hoveredResizeBox;
+        res=true;
+      } else if(this._isCoordWithinArea([mouseCurX,mouseCurY])) {
+        cursor = 'move';
+        this._areaIsHover = true;
+        res=true;
+      }
+    }
+
+    this._dontDragOutside();
+    angular.element(this._ctx.canvas).css({'cursor': cursor});
+
+    return res;
+  };
+
+  CropAreaSquare.prototype.processMouseDown=function(mouseDownX, mouseDownY) {
+    var isWithinResizeCtrl=this._isCoordWithinResizeCtrl([mouseDownX,mouseDownY]);
+    if (isWithinResizeCtrl>-1) {
+      this._areaIsDragging = false;
+      this._areaIsHover = false;
+      this._resizeCtrlIsDragging = isWithinResizeCtrl;
+      this._resizeCtrlIsHover = isWithinResizeCtrl;
+      this._posResizeStartX=mouseDownX;
+      this._posResizeStartY=mouseDownY;
+      this._posResizeStartSize = this._size;
+      this._events.trigger('area-resize-start');
+    } else if (this._isCoordWithinArea([mouseDownX,mouseDownY])) {
+      this._areaIsDragging = true;
+      this._areaIsHover = true;
+      this._resizeCtrlIsDragging = -1;
+      this._resizeCtrlIsHover = -1;
+      this._posDragStartX = mouseDownX - this._x;
+      this._posDragStartY = mouseDownY - this._y;
+      this._events.trigger('area-move-start');
+    }
+  };
+
+  CropAreaSquare.prototype.processMouseUp=function(/*mouseUpX, mouseUpY*/) {
+    if(this._areaIsDragging) {
+      this._areaIsDragging = false;
+      this._events.trigger('area-move-end');
+    }
+    if(this._resizeCtrlIsDragging>-1) {
+      this._resizeCtrlIsDragging = -1;
+      this._events.trigger('area-resize-end');
+    }
+    this._areaIsHover = false;
+    this._resizeCtrlIsHover = -1;
+
+    this._posDragStartX = 0;
+    this._posDragStartY = 0;
+  };
+
+  return CropAreaSquare;
+}]);
+
+crop.factory('cropArea', ['cropCanvas', function(CropCanvas) {
+  var CropArea = function(ctx, events) {
+    this._ctx=ctx;
+    this._events=events;
+
+    this._minSize=80;
+
+    this._cropCanvas=new CropCanvas(ctx);
+
+    this._image=new Image();
+    this._x = 0;
+    this._y = 0;
+    this._size = 200;
+  };
+
+  /* GETTERS/SETTERS */
+
+  CropArea.prototype.getImage = function () {
+    return this._image;
+  };
+  CropArea.prototype.setImage = function (image) {
+    this._image = image;
+  };
+
+  CropArea.prototype.getX = function () {
+    return this._x;
+  };
+  CropArea.prototype.setX = function (x) {
+    this._x = x;
+    this._dontDragOutside();
+  };
+
+  CropArea.prototype.getY = function () {
+    return this._y;
+  };
+  CropArea.prototype.setY = function (y) {
+    this._y = y;
+    this._dontDragOutside();
+  };
+
+  CropArea.prototype.getSize = function () {
+    return this._size;
+  };
+  CropArea.prototype.setSize = function (size) {
+    this._size = Math.max(this._minSize, size);
+    this._dontDragOutside();
+  };
+
+  CropArea.prototype.getMinSize = function () {
+    return this._minSize;
+  };
+  CropArea.prototype.setMinSize = function (size) {
+    this._minSize = size;
+    this._size = Math.max(this._minSize, this._size);
+    this._dontDragOutside();
+  };
+
+  /* FUNCTIONS */
+  CropArea.prototype._dontDragOutside=function() {
+    var h=this._ctx.canvas.height,
+        w=this._ctx.canvas.width;
+    if(this._size>w) { this._size=w; }
+    if(this._size>h) { this._size=h; }
+    if(this._x<this._size/2) { this._x=this._size/2; }
+    if(this._x>w-this._size/2) { this._x=w-this._size/2; }
+    if(this._y<this._size/2) { this._y=this._size/2; }
+    if(this._y>h-this._size/2) { this._y=h-this._size/2; }
+  };
+
+  CropArea.prototype._drawArea=function() {};
+
+  CropArea.prototype.draw=function() {
+    // draw crop area
+    this._cropCanvas.drawCropArea(this._image,[this._x,this._y],this._size,this._drawArea);
+  };
+
+  CropArea.prototype.processMouseMove=function() {};
+
+  CropArea.prototype.processMouseDown=function() {};
+
+  CropArea.prototype.processMouseUp=function() {};
+
+  return CropArea;
+}]);
+
+crop.factory('cropCanvas', [function() {
+  // Shape = Array of [x,y]; [0, 0] - center
+  var shapeArrowNW=[[-0.5,-2],[-3,-4.5],[-0.5,-7],[-7,-7],[-7,-0.5],[-4.5,-3],[-2,-0.5]];
+  var shapeArrowNE=[[0.5,-2],[3,-4.5],[0.5,-7],[7,-7],[7,-0.5],[4.5,-3],[2,-0.5]];
+  var shapeArrowSW=[[-0.5,2],[-3,4.5],[-0.5,7],[-7,7],[-7,0.5],[-4.5,3],[-2,0.5]];
+  var shapeArrowSE=[[0.5,2],[3,4.5],[0.5,7],[7,7],[7,0.5],[4.5,3],[2,0.5]];
+  var shapeArrowN=[[-1.5,-2.5],[-1.5,-6],[-5,-6],[0,-11],[5,-6],[1.5,-6],[1.5,-2.5]];
+  var shapeArrowW=[[-2.5,-1.5],[-6,-1.5],[-6,-5],[-11,0],[-6,5],[-6,1.5],[-2.5,1.5]];
+  var shapeArrowS=[[-1.5,2.5],[-1.5,6],[-5,6],[0,11],[5,6],[1.5,6],[1.5,2.5]];
+  var shapeArrowE=[[2.5,-1.5],[6,-1.5],[6,-5],[11,0],[6,5],[6,1.5],[2.5,1.5]];
+
+  // Colors
+  var colors={
+    areaOutline: '#fff',
+    resizeBoxStroke: '#fff',
+    resizeBoxFill: '#444',
+    resizeBoxArrowFill: '#fff',
+    resizeCircleStroke: '#fff',
+    resizeCircleFill: '#444',
+    moveIconFill: '#fff'
+  };
+
+  return function(ctx){
+
+    /* Base functions */
+
+    // Calculate Point
+    var calcPoint=function(point,offset,scale) {
+        return [scale*point[0]+offset[0], scale*point[1]+offset[1]];
+    };
+
+    // Draw Filled Polygon
+    var drawFilledPolygon=function(shape,fillStyle,centerCoords,scale) {
+        ctx.save();
+        ctx.fillStyle = fillStyle;
+        ctx.beginPath();
+        var pc, pc0=calcPoint(shape[0],centerCoords,scale);
+        ctx.moveTo(pc0[0],pc0[1]);
+
+        for(var p in shape) {
+            if (p > 0) {
+                pc=calcPoint(shape[p],centerCoords,scale);
+                ctx.lineTo(pc[0],pc[1]);
+            }
+        }
+
+        ctx.lineTo(pc0[0],pc0[1]);
+        ctx.fill();
+        ctx.closePath();
+        ctx.restore();
+    };
+
+    /* Icons */
+
+    this.drawIconMove=function(centerCoords, scale) {
+      drawFilledPolygon(shapeArrowN, colors.moveIconFill, centerCoords, scale);
+      drawFilledPolygon(shapeArrowW, colors.moveIconFill, centerCoords, scale);
+      drawFilledPolygon(shapeArrowS, colors.moveIconFill, centerCoords, scale);
+      drawFilledPolygon(shapeArrowE, colors.moveIconFill, centerCoords, scale);
+    };
+
+    this.drawIconResizeCircle=function(centerCoords, circleRadius, scale) {
+      var scaledCircleRadius=circleRadius*scale;
+      ctx.save();
+      ctx.strokeStyle = colors.resizeCircleStroke;
+      ctx.lineWidth = 2;
+      ctx.fillStyle = colors.resizeCircleFill;
+      ctx.beginPath();
+      ctx.arc(centerCoords[0],centerCoords[1],scaledCircleRadius,0,2*Math.PI);
+      ctx.fill();
+      ctx.stroke();
+      ctx.closePath();
+      ctx.restore();
+    };
+
+    this.drawIconResizeBoxBase=function(centerCoords, boxSize, scale) {
+      var scaledBoxSize=boxSize*scale;
+      ctx.save();
+      ctx.strokeStyle = colors.resizeBoxStroke;
+      ctx.lineWidth = 2;
+      ctx.fillStyle = colors.resizeBoxFill;
+      ctx.fillRect(centerCoords[0] - scaledBoxSize/2, centerCoords[1] - scaledBoxSize/2, scaledBoxSize, scaledBoxSize);
+      ctx.strokeRect(centerCoords[0] - scaledBoxSize/2, centerCoords[1] - scaledBoxSize/2, scaledBoxSize, scaledBoxSize);
+      ctx.restore();
+    };
+    this.drawIconResizeBoxNESW=function(centerCoords, boxSize, scale) {
+      this.drawIconResizeBoxBase(centerCoords, boxSize, scale);
+      drawFilledPolygon(shapeArrowNE, colors.resizeBoxArrowFill, centerCoords, scale);
+      drawFilledPolygon(shapeArrowSW, colors.resizeBoxArrowFill, centerCoords, scale);
+    };
+    this.drawIconResizeBoxNWSE=function(centerCoords, boxSize, scale) {
+      this.drawIconResizeBoxBase(centerCoords, boxSize, scale);
+      drawFilledPolygon(shapeArrowNW, colors.resizeBoxArrowFill, centerCoords, scale);
+      drawFilledPolygon(shapeArrowSE, colors.resizeBoxArrowFill, centerCoords, scale);
+    };
+
+    /* Crop Area */
+
+    this.drawCropArea=function(image, centerCoords, size, fnDrawClipPath) {
+      var xRatio=image.width/ctx.canvas.width,
+          yRatio=image.height/ctx.canvas.height,
+          xLeft=centerCoords[0]-size/2,
+          yTop=centerCoords[1]-size/2;
+
+      ctx.save();
+      ctx.strokeStyle = colors.areaOutline;
+      ctx.lineWidth = 2;
+      ctx.beginPath();
+      fnDrawClipPath(ctx, centerCoords, size);
+      ctx.stroke();
+      ctx.clip();
+
+      // draw part of original image
+      if (size > 0) {
+          ctx.drawImage(image, xLeft*xRatio, yTop*yRatio, size*xRatio, size*yRatio, xLeft, yTop, size, size);
+      }
+
+      ctx.beginPath();
+      fnDrawClipPath(ctx, centerCoords, size);
+      ctx.stroke();
+      ctx.clip();
+
+      ctx.restore();
+    };
+
+  };
+}]);
+
+/**
+ * EXIF service is based on the exif-js library (https://github.com/jseidelin/exif-js)
+ */
+
+crop.service('cropEXIF', [function() {
+  var debug = false;
+
+  var ExifTags = this.Tags = {
+
+      // version tags
+      0x9000 : "ExifVersion",             // EXIF version
+      0xA000 : "FlashpixVersion",         // Flashpix format version
+
+      // colorspace tags
+      0xA001 : "ColorSpace",              // Color space information tag
+
+      // image configuration
+      0xA002 : "PixelXDimension",         // Valid width of meaningful image
+      0xA003 : "PixelYDimension",         // Valid height of meaningful image
+      0x9101 : "ComponentsConfiguration", // Information about channels
+      0x9102 : "CompressedBitsPerPixel",  // Compressed bits per pixel
+
+      // user information
+      0x927C : "MakerNote",               // Any desired information written by the manufacturer
+      0x9286 : "UserComment",             // Comments by user
+
+      // related file
+      0xA004 : "RelatedSoundFile",        // Name of related sound file
+
+      // date and time
+      0x9003 : "DateTimeOriginal",        // Date and time when the original image was generated
+      0x9004 : "DateTimeDigitized",       // Date and time when the image was stored digitally
+      0x9290 : "SubsecTime",              // Fractions of seconds for DateTime
+      0x9291 : "SubsecTimeOriginal",      // Fractions of seconds for DateTimeOriginal
+      0x9292 : "SubsecTimeDigitized",     // Fractions of seconds for DateTimeDigitized
+
+      // picture-taking conditions
+      0x829A : "ExposureTime",            // Exposure time (in seconds)
+      0x829D : "FNumber",                 // F number
+      0x8822 : "ExposureProgram",         // Exposure program
+      0x8824 : "SpectralSensitivity",     // Spectral sensitivity
+      0x8827 : "ISOSpeedRatings",         // ISO speed rating
+      0x8828 : "OECF",                    // Optoelectric conversion factor
+      0x9201 : "ShutterSpeedValue",       // Shutter speed
+      0x9202 : "ApertureValue",           // Lens aperture
+      0x9203 : "BrightnessValue",         // Value of brightness
+      0x9204 : "ExposureBias",            // Exposure bias
+      0x9205 : "MaxApertureValue",        // Smallest F number of lens
+      0x9206 : "SubjectDistance",         // Distance to subject in meters
+      0x9207 : "MeteringMode",            // Metering mode
+      0x9208 : "LightSource",             // Kind of light source
+      0x9209 : "Flash",                   // Flash status
+      0x9214 : "SubjectArea",             // Location and area of main subject
+      0x920A : "FocalLength",             // Focal length of the lens in mm
+      0xA20B : "FlashEnergy",             // Strobe energy in BCPS
+      0xA20C : "SpatialFrequencyResponse",    //
+      0xA20E : "FocalPlaneXResolution",   // Number of pixels in width direction per FocalPlaneResolutionUnit
+      0xA20F : "FocalPlaneYResolution",   // Number of pixels in height direction per FocalPlaneResolutionUnit
+      0xA210 : "FocalPlaneResolutionUnit",    // Unit for measuring FocalPlaneXResolution and FocalPlaneYResolution
+      0xA214 : "SubjectLocation",         // Location of subject in image
+      0xA215 : "ExposureIndex",           // Exposure index selected on camera
+      0xA217 : "SensingMethod",           // Image sensor type
+      0xA300 : "FileSource",              // Image source (3 == DSC)
+      0xA301 : "SceneType",               // Scene type (1 == directly photographed)
+      0xA302 : "CFAPattern",              // Color filter array geometric pattern
+      0xA401 : "CustomRendered",          // Special processing
+      0xA402 : "ExposureMode",            // Exposure mode
+      0xA403 : "WhiteBalance",            // 1 = auto white balance, 2 = manual
+      0xA404 : "DigitalZoomRation",       // Digital zoom ratio
+      0xA405 : "FocalLengthIn35mmFilm",   // Equivalent foacl length assuming 35mm film camera (in mm)
+      0xA406 : "SceneCaptureType",        // Type of scene
+      0xA407 : "GainControl",             // Degree of overall image gain adjustment
+      0xA408 : "Contrast",                // Direction of contrast processing applied by camera
+      0xA409 : "Saturation",              // Direction of saturation processing applied by camera
+      0xA40A : "Sharpness",               // Direction of sharpness processing applied by camera
+      0xA40B : "DeviceSettingDescription",    //
+      0xA40C : "SubjectDistanceRange",    // Distance to subject
+
+      // other tags
+      0xA005 : "InteroperabilityIFDPointer",
+      0xA420 : "ImageUniqueID"            // Identifier assigned uniquely to each image
+  };
+
+  var TiffTags = this.TiffTags = {
+      0x0100 : "ImageWidth",
+      0x0101 : "ImageHeight",
+      0x8769 : "ExifIFDPointer",
+      0x8825 : "GPSInfoIFDPointer",
+      0xA005 : "InteroperabilityIFDPointer",
+      0x0102 : "BitsPerSample",
+      0x0103 : "Compression",
+      0x0106 : "PhotometricInterpretation",
+      0x0112 : "Orientation",
+      0x0115 : "SamplesPerPixel",
+      0x011C : "PlanarConfiguration",
+      0x0212 : "YCbCrSubSampling",
+      0x0213 : "YCbCrPositioning",
+      0x011A : "XResolution",
+      0x011B : "YResolution",
+      0x0128 : "ResolutionUnit",
+      0x0111 : "StripOffsets",
+      0x0116 : "RowsPerStrip",
+      0x0117 : "StripByteCounts",
+      0x0201 : "JPEGInterchangeFormat",
+      0x0202 : "JPEGInterchangeFormatLength",
+      0x012D : "TransferFunction",
+      0x013E : "WhitePoint",
+      0x013F : "PrimaryChromaticities",
+      0x0211 : "YCbCrCoefficients",
+      0x0214 : "ReferenceBlackWhite",
+      0x0132 : "DateTime",
+      0x010E : "ImageDescription",
+      0x010F : "Make",
+      0x0110 : "Model",
+      0x0131 : "Software",
+      0x013B : "Artist",
+      0x8298 : "Copyright"
+  };
+
+  var GPSTags = this.GPSTags = {
+      0x0000 : "GPSVersionID",
+      0x0001 : "GPSLatitudeRef",
+      0x0002 : "GPSLatitude",
+      0x0003 : "GPSLongitudeRef",
+      0x0004 : "GPSLongitude",
+      0x0005 : "GPSAltitudeRef",
+      0x0006 : "GPSAltitude",
+      0x0007 : "GPSTimeStamp",
+      0x0008 : "GPSSatellites",
+      0x0009 : "GPSStatus",
+      0x000A : "GPSMeasureMode",
+      0x000B : "GPSDOP",
+      0x000C : "GPSSpeedRef",
+      0x000D : "GPSSpeed",
+      0x000E : "GPSTrackRef",
+      0x000F : "GPSTrack",
+      0x0010 : "GPSImgDirectionRef",
+      0x0011 : "GPSImgDirection",
+      0x0012 : "GPSMapDatum",
+      0x0013 : "GPSDestLatitudeRef",
+      0x0014 : "GPSDestLatitude",
+      0x0015 : "GPSDestLongitudeRef",
+      0x0016 : "GPSDestLongitude",
+      0x0017 : "GPSDestBearingRef",
+      0x0018 : "GPSDestBearing",
+      0x0019 : "GPSDestDistanceRef",
+      0x001A : "GPSDestDistance",
+      0x001B : "GPSProcessingMethod",
+      0x001C : "GPSAreaInformation",
+      0x001D : "GPSDateStamp",
+      0x001E : "GPSDifferential"
+  };
+
+  var StringValues = this.StringValues = {
+      ExposureProgram : {
+          0 : "Not defined",
+          1 : "Manual",
+          2 : "Normal program",
+          3 : "Aperture priority",
+          4 : "Shutter priority",
+          5 : "Creative program",
+          6 : "Action program",
+          7 : "Portrait mode",
+          8 : "Landscape mode"
+      },
+      MeteringMode : {
+          0 : "Unknown",
+          1 : "Average",
+          2 : "CenterWeightedAverage",
+          3 : "Spot",
+          4 : "MultiSpot",
+          5 : "Pattern",
+          6 : "Partial",
+          255 : "Other"
+      },
+      LightSource : {
+          0 : "Unknown",
+          1 : "Daylight",
+          2 : "Fluorescent",
+          3 : "Tungsten (incandescent light)",
+          4 : "Flash",
+          9 : "Fine weather",
+          10 : "Cloudy weather",
+          11 : "Shade",
+          12 : "Daylight fluorescent (D 5700 - 7100K)",
+          13 : "Day white fluorescent (N 4600 - 5400K)",
+          14 : "Cool white fluorescent (W 3900 - 4500K)",
+          15 : "White fluorescent (WW 3200 - 3700K)",
+          17 : "Standard light A",
+          18 : "Standard light B",
+          19 : "Standard light C",
+          20 : "D55",
+          21 : "D65",
+          22 : "D75",
+          23 : "D50",
+          24 : "ISO studio tungsten",
+          255 : "Other"
+      },
+      Flash : {
+          0x0000 : "Flash did not fire",
+          0x0001 : "Flash fired",
+          0x0005 : "Strobe return light not detected",
+          0x0007 : "Strobe return light detected",
+          0x0009 : "Flash fired, compulsory flash mode",
+          0x000D : "Flash fired, compulsory flash mode, return light not detected",
+          0x000F : "Flash fired, compulsory flash mode, return light detected",
+          0x0010 : "Flash did not fire, compulsory flash mode",
+          0x0018 : "Flash did not fire, auto mode",
+          0x0019 : "Flash fired, auto mode",
+          0x001D : "Flash fired, auto mode, return light not detected",
+          0x001F : "Flash fired, auto mode, return light detected",
+          0x0020 : "No flash function",
+          0x0041 : "Flash fired, red-eye reduction mode",
+          0x0045 : "Flash fired, red-eye reduction mode, return light not detected",
+          0x0047 : "Flash fired, red-eye reduction mode, return light detected",
+          0x0049 : "Flash fired, compulsory flash mode, red-eye reduction mode",
+          0x004D : "Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected",
+          0x004F : "Flash fired, compulsory flash mode, red-eye reduction mode, return light detected",
+          0x0059 : "Flash fired, auto mode, red-eye reduction mode",
+          0x005D : "Flash fired, auto mode, return light not detected, red-eye reduction mode",
+          0x005F : "Flash fired, auto mode, return light detected, red-eye reduction mode"
+      },
+      SensingMethod : {
+          1 : "Not defined",
+          2 : "One-chip color area sensor",
+          3 : "Two-chip color area sensor",
+          4 : "Three-chip color area sensor",
+          5 : "Color sequential area sensor",
+          7 : "Trilinear sensor",
+          8 : "Color sequential linear sensor"
+      },
+      SceneCaptureType : {
+          0 : "Standard",
+          1 : "Landscape",
+          2 : "Portrait",
+          3 : "Night scene"
+      },
+      SceneType : {
+          1 : "Directly photographed"
+      },
+      CustomRendered : {
+          0 : "Normal process",
+          1 : "Custom process"
+      },
+      WhiteBalance : {
+          0 : "Auto white balance",
+          1 : "Manual white balance"
+      },
+      GainControl : {
+          0 : "None",
+          1 : "Low gain up",
+          2 : "High gain up",
+          3 : "Low gain down",
+          4 : "High gain down"
+      },
+      Contrast : {
+          0 : "Normal",
+          1 : "Soft",
+          2 : "Hard"
+      },
+      Saturation : {
+          0 : "Normal",
+          1 : "Low saturation",
+          2 : "High saturation"
+      },
+      Sharpness : {
+          0 : "Normal",
+          1 : "Soft",
+          2 : "Hard"
+      },
+      SubjectDistanceRange : {
+          0 : "Unknown",
+          1 : "Macro",
+          2 : "Close view",
+          3 : "Distant view"
+      },
+      FileSource : {
+          3 : "DSC"
+      },
+
+      Components : {
+          0 : "",
+          1 : "Y",
+          2 : "Cb",
+          3 : "Cr",
+          4 : "R",
+          5 : "G",
+          6 : "B"
+      }
+  };
+
+  function addEvent(element, event, handler) {
+      if (element.addEventListener) {
+          element.addEventListener(event, handler, false);
+      } else if (element.attachEvent) {
+          element.attachEvent("on" + event, handler);
+      }
+  }
+
+  function imageHasData(img) {
+      return !!(img.exifdata);
+  }
+
+  function base64ToArrayBuffer(base64, contentType) {
+      contentType = contentType || base64.match(/^data\:([^\;]+)\;base64,/mi)[1] || ''; // e.g. 'data:image/jpeg;base64,...' => 'image/jpeg'
+      base64 = base64.replace(/^data\:([^\;]+)\;base64,/gmi, '');
+      var binary = atob(base64);
+      var len = binary.length;
+      var buffer = new ArrayBuffer(len);
+      var view = new Uint8Array(buffer);
+      for (var i = 0; i < len; i++) {
+          view[i] = binary.charCodeAt(i);
+      }
+      return buffer;
+  }
+
+  function objectURLToBlob(url, callback) {
+      var http = new XMLHttpRequest();
+      http.open("GET", url, true);
+      http.responseType = "blob";
+      http.onload = function(e) {
+          if (this.status == 200 || this.status === 0) {
+              callback(this.response);
+          }
+      };
+      http.send();
+  }
+
+  function getImageData(img, callback) {
+      function handleBinaryFile(binFile) {
+          var data = findEXIFinJPEG(binFile);
+          var iptcdata = findIPTCinJPEG(binFile);
+          img.exifdata = data || {};
+          img.iptcdata = iptcdata || {};
+          if (callback) {
+              callback.call(img);
+          }
+      }
+
+      if (img.src) {
+          if (/^data\:/i.test(img.src)) { // Data URI
+              var arrayBuffer = base64ToArrayBuffer(img.src);
+              handleBinaryFile(arrayBuffer);
+
+          } else if (/^blob\:/i.test(img.src)) { // Object URL
+              var fileReader = new FileReader();
+              fileReader.onload = function(e) {
+                  handleBinaryFile(e.target.result);
+              };
+              objectURLToBlob(img.src, function (blob) {
+                  fileReader.readAsArrayBuffer(blob);
+              });
+          } else {
+              var http = new XMLHttpRequest();
+              http.onload = function() {
+                  if (this.status == 200 || this.status === 0) {
+                      handleBinaryFile(http.response);
+                  } else {
+                      throw "Could not load image";
+                  }
+                  http = null;
+              };
+              http.open("GET", img.src, true);
+              http.responseType = "arraybuffer";
+              http.send(null);
+          }
+      } else if (window.FileReader && (img instanceof window.Blob || img instanceof window.File)) {
+          var fileReader = new FileReader();
+          fileReader.onload = function(e) {
+              if (debug) console.log("Got file of length " + e.target.result.byteLength);
+              handleBinaryFile(e.target.result);
+          };
+
+          fileReader.readAsArrayBuffer(img);
+      }
+  }
+
+  function findEXIFinJPEG(file) {
+      var dataView = new DataView(file);
+
+      if (debug) console.log("Got file of length " + file.byteLength);
+      if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {
+          if (debug) console.log("Not a valid JPEG");
+          return false; // not a valid jpeg
+      }
+
+      var offset = 2,
+          length = file.byteLength,
+          marker;
+
+      while (offset < length) {
+          if (dataView.getUint8(offset) != 0xFF) {
+              if (debug) console.log("Not a valid marker at offset " + offset + ", found: " + dataView.getUint8(offset));
+              return false; // not a valid marker, something is wrong
+          }
+
+          marker = dataView.getUint8(offset + 1);
+          if (debug) console.log(marker);
+
+          // we could implement handling for other markers here,
+          // but we're only looking for 0xFFE1 for EXIF data
+
+          if (marker == 225) {
+              if (debug) console.log("Found 0xFFE1 marker");
+
+              return readEXIFData(dataView, offset + 4, dataView.getUint16(offset + 2) - 2);
+
+              // offset += 2 + file.getShortAt(offset+2, true);
+
+          } else {
+              offset += 2 + dataView.getUint16(offset+2);
+          }
+
+      }
+
+  }
+
+  function findIPTCinJPEG(file) {
+      var dataView = new DataView(file);
+
+      if (debug) console.log("Got file of length " + file.byteLength);
+      if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {
+          if (debug) console.log("Not a valid JPEG");
+          return false; // not a valid jpeg
+      }
+
+      var offset = 2,
+          length = file.byteLength;
+
+      var isFieldSegmentStart = function(dataView, offset){
+          return (
+              dataView.getUint8(offset) === 0x38 &&
+              dataView.getUint8(offset+1) === 0x42 &&
+              dataView.getUint8(offset+2) === 0x49 &&
+              dataView.getUint8(offset+3) === 0x4D &&
+              dataView.getUint8(offset+4) === 0x04 &&
+              dataView.getUint8(offset+5) === 0x04
+          );
+      };
+
+      while (offset < length) {
+
+          if ( isFieldSegmentStart(dataView, offset )){
+
+              // Get the length of the name header (which is padded to an even number of bytes)
+              var nameHeaderLength = dataView.getUint8(offset+7);
+              if(nameHeaderLength % 2 !== 0) nameHeaderLength += 1;
+              // Check for pre photoshop 6 format
+              if(nameHeaderLength === 0) {
+                  // Always 4
+                  nameHeaderLength = 4;
+              }
+
+              var startOffset = offset + 8 + nameHeaderLength;
+              var sectionLength = dataView.getUint16(offset + 6 + nameHeaderLength);
+
+              return readIPTCData(file, startOffset, sectionLength);
+
+              break;
+
+          }
+
+          // Not the marker, continue searching
+          offset++;
+
+      }
+
+  }
+  var IptcFieldMap = {
+      0x78 : 'caption',
+      0x6E : 'credit',
+      0x19 : 'keywords',
+      0x37 : 'dateCreated',
+      0x50 : 'byline',
+      0x55 : 'bylineTitle',
+      0x7A : 'captionWriter',
+      0x69 : 'headline',
+      0x74 : 'copyright',
+      0x0F : 'category'
+  };
+  function readIPTCData(file, startOffset, sectionLength){
+      var dataView = new DataView(file);
+      var data = {};
+      var fieldValue, fieldName, dataSize, segmentType, segmentSize;
+      var segmentStartPos = startOffset;
+      while(segmentStartPos < startOffset+sectionLength) {
+          if(dataView.getUint8(segmentStartPos) === 0x1C && dataView.getUint8(segmentStartPos+1) === 0x02){
+              segmentType = dataView.getUint8(segmentStartPos+2);
+              if(segmentType in IptcFieldMap) {
+                  dataSize = dataView.getInt16(segmentStartPos+3);
+                  segmentSize = dataSize + 5;
+                  fieldName = IptcFieldMap[segmentType];
+                  fieldValue = getStringFromDB(dataView, segmentStartPos+5, dataSize);
+                  // Check if we already stored a value with this name
+                  if(data.hasOwnProperty(fieldName)) {
+                      // Value already stored with this name, create multivalue field
+                      if(data[fieldName] instanceof Array) {
+                          data[fieldName].push(fieldValue);
+                      }
+                      else {
+                          data[fieldName] = [data[fieldName], fieldValue];
+                      }
+                  }
+                  else {
+                      data[fieldName] = fieldValue;
+                  }
+              }
+
+          }
+          segmentStartPos++;
+      }
+      return data;
+  }
+
+  function readTags(file, tiffStart, dirStart, strings, bigEnd) {
+      var entries = file.getUint16(dirStart, !bigEnd),
+          tags = {},
+          entryOffset, tag,
+          i;
+
+      for (i=0;i<entries;i++) {
+          entryOffset = dirStart + i*12 + 2;
+          tag = strings[file.getUint16(entryOffset, !bigEnd)];
+          if (!tag && debug) console.log("Unknown tag: " + file.getUint16(entryOffset, !bigEnd));
+          tags[tag] = readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);
+      }
+      return tags;
+  }
+
+  function readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {
+      var type = file.getUint16(entryOffset+2, !bigEnd),
+          numValues = file.getUint32(entryOffset+4, !bigEnd),
+          valueOffset = file.getUint32(entryOffset+8, !bigEnd) + tiffStart,
+          offset,
+          vals, val, n,
+          numerator, denominator;
+
+      switch (type) {
+          case 1: // byte, 8-bit unsigned int
+          case 7: // undefined, 8-bit byte, value depending on field
+              if (numValues == 1) {
+                  return file.getUint8(entryOffset + 8, !bigEnd);
+              } else {
+                  offset = numValues > 4 ? valueOffset : (entryOffset + 8);
+                  vals = [];
+                  for (n=0;n<numValues;n++) {
+                      vals[n] = file.getUint8(offset + n);
+                  }
+                  return vals;
+              }
+
+          case 2: // ascii, 8-bit byte
+              offset = numValues > 4 ? valueOffset : (entryOffset + 8);
+              return getStringFromDB(file, offset, numValues-1);
+
+          case 3: // short, 16 bit int
+              if (numValues == 1) {
+                  return file.getUint16(entryOffset + 8, !bigEnd);
+              } else {
+                  offset = numValues > 2 ? valueOffset : (entryOffset + 8);
+                  vals = [];
+                  for (n=0;n<numValues;n++) {
+                      vals[n] = file.getUint16(offset + 2*n, !bigEnd);
+                  }
+                  return vals;
+              }
+
+          case 4: // long, 32 bit int
+              if (numValues == 1) {
+                  return file.getUint32(entryOffset + 8, !bigEnd);
+              } else {
+                  vals = [];
+                  for (n=0;n<numValues;n++) {
+                      vals[n] = file.getUint32(valueOffset + 4*n, !bigEnd);
+                  }
+                  return vals;
+              }
+
+          case 5:    // rational = two long values, first is numerator, second is denominator
+              if (numValues == 1) {
+                  numerator = file.getUint32(valueOffset, !bigEnd);
+                  denominator = file.getUint32(valueOffset+4, !bigEnd);
+                  val = new Number(numerator / denominator);
+                  val.numerator = numerator;
+                  val.denominator = denominator;
+                  return val;
+              } else {
+                  vals = [];
+                  for (n=0;n<numValues;n++) {
+                      numerator = file.getUint32(valueOffset + 8*n, !bigEnd);
+                      denominator = file.getUint32(valueOffset+4 + 8*n, !bigEnd);
+                      vals[n] = new Number(numerator / denominator);
+                      vals[n].numerator = numerator;
+                      vals[n].denominator = denominator;
+                  }
+                  return vals;
+              }
+
+          case 9: // slong, 32 bit signed int
+              if (numValues == 1) {
+                  return file.getInt32(entryOffset + 8, !bigEnd);
+              } else {
+                  vals = [];
+                  for (n=0;n<numValues;n++) {
+                      vals[n] = file.getInt32(valueOffset + 4*n, !bigEnd);
+                  }
+                  return vals;
+              }
+
+          case 10: // signed rational, two slongs, first is numerator, second is denominator
+              if (numValues == 1) {
+                  return file.getInt32(valueOffset, !bigEnd) / file.getInt32(valueOffset+4, !bigEnd);
+              } else {
+                  vals = [];
+                  for (n=0;n<numValues;n++) {
+                      vals[n] = file.getInt32(valueOffset + 8*n, !bigEnd) / file.getInt32(valueOffset+4 + 8*n, !bigEnd);
+                  }
+                  return vals;
+              }
+      }
+  }
+
+  function getStringFromDB(buffer, start, length) {
+      var outstr = "";
+      for (var n = start; n < start+length; n++) {
+          outstr += String.fromCharCode(buffer.getUint8(n));
+      }
+      return outstr;
+  }
+
+  function readEXIFData(file, start) {
+      if (getStringFromDB(file, start, 4) != "Exif") {
+          if (debug) console.log("Not valid EXIF data! " + getStringFromDB(file, start, 4));
+          return false;
+      }
+
+      var bigEnd,
+          tags, tag,
+          exifData, gpsData,
+          tiffOffset = start + 6;
+
+      // test for TIFF validity and endianness
+      if (file.getUint16(tiffOffset) == 0x4949) {
+          bigEnd = false;
+      } else if (file.getUint16(tiffOffset) == 0x4D4D) {
+          bigEnd = true;
+      } else {
+          if (debug) console.log("Not valid TIFF data! (no 0x4949 or 0x4D4D)");
+          return false;
+      }
+
+      if (file.getUint16(tiffOffset+2, !bigEnd) != 0x002A) {
+          if (debug) console.log("Not valid TIFF data! (no 0x002A)");
+          return false;
+      }
+
+      var firstIFDOffset = file.getUint32(tiffOffset+4, !bigEnd);
+
+      if (firstIFDOffset < 0x00000008) {
+          if (debug) console.log("Not valid TIFF data! (First offset less than 8)", file.getUint32(tiffOffset+4, !bigEnd));
+          return false;
+      }
+
+      tags = readTags(file, tiffOffset, tiffOffset + firstIFDOffset, TiffTags, bigEnd);
+
+      if (tags.ExifIFDPointer) {
+          exifData = readTags(file, tiffOffset, tiffOffset + tags.ExifIFDPointer, ExifTags, bigEnd);
+          for (tag in exifData) {
+              switch (tag) {
+                  case "LightSource" :
+                  case "Flash" :
+                  case "MeteringMode" :
+                  case "ExposureProgram" :
+                  case "SensingMethod" :
+                  case "SceneCaptureType" :
+                  case "SceneType" :
+                  case "CustomRendered" :
+                  case "WhiteBalance" :
+                  case "GainControl" :
+                  case "Contrast" :
+                  case "Saturation" :
+                  case "Sharpness" :
+                  case "SubjectDistanceRange" :
+                  case "FileSource" :
+                      exifData[tag] = StringValues[tag][exifData[tag]];
+                      break;
+
+                  case "ExifVersion" :
+                  case "FlashpixVersion" :
+                      exifData[tag] = String.fromCharCode(exifData[tag][0], exifData[tag][1], exifData[tag][2], exifData[tag][3]);
+                      break;
+
+                  case "ComponentsConfiguration" :
+                      exifData[tag] =
+                          StringValues.Components[exifData[tag][0]] +
+                          StringValues.Components[exifData[tag][1]] +
+                          StringValues.Components[exifData[tag][2]] +
+                          StringValues.Components[exifData[tag][3]];
+                      break;
+              }
+              tags[tag] = exifData[tag];
+          }
+      }
+
+      if (tags.GPSInfoIFDPointer) {
+          gpsData = readTags(file, tiffOffset, tiffOffset + tags.GPSInfoIFDPointer, GPSTags, bigEnd);
+          for (tag in gpsData) {
+              switch (tag) {
+                  case "GPSVersionID" :
+                      gpsData[tag] = gpsData[tag][0] +
+                          "." + gpsData[tag][1] +
+                          "." + gpsData[tag][2] +
+                          "." + gpsData[tag][3];
+                      break;
+              }
+              tags[tag] = gpsData[tag];
+          }
+      }
+
+      return tags;
+  }
+
+  this.getData = function(img, callback) {
+      if ((img instanceof Image || img instanceof HTMLImageElement) && !img.complete) return false;
+
+      if (!imageHasData(img)) {
+          getImageData(img, callback);
+      } else {
+          if (callback) {
+              callback.call(img);
+          }
+      }
+      return true;
+  }
+
+  this.getTag = function(img, tag) {
+      if (!imageHasData(img)) return;
+      return img.exifdata[tag];
+  }
+
+  this.getAllTags = function(img) {
+      if (!imageHasData(img)) return {};
+      var a,
+          data = img.exifdata,
+          tags = {};
+      for (a in data) {
+          if (data.hasOwnProperty(a)) {
+              tags[a] = data[a];
+          }
+      }
+      return tags;
+  }
+
+  this.pretty = function(img) {
+      if (!imageHasData(img)) return "";
+      var a,
+          data = img.exifdata,
+          strPretty = "";
+      for (a in data) {
+          if (data.hasOwnProperty(a)) {
+              if (typeof data[a] == "object") {
+                  if (data[a] instanceof Number) {
+                      strPretty += a + " : " + data[a] + " [" + data[a].numerator + "/" + data[a].denominator + "]\r\n";
+                  } else {
+                      strPretty += a + " : [" + data[a].length + " values]\r\n";
+                  }
+              } else {
+                  strPretty += a + " : " + data[a] + "\r\n";
+              }
+          }
+      }
+      return strPretty;
+  }
+
+  this.readFromBinaryFile = function(file) {
+      return findEXIFinJPEG(file);
+  }
+}]);
+
+crop.factory('cropHost', ['$document', 'cropAreaCircle', 'cropAreaSquare', 'cropEXIF', function($document, CropAreaCircle, CropAreaSquare, cropEXIF) {
+  /* STATIC FUNCTIONS */
+
+  // Get Element's Offset
+  var getElementOffset=function(elem) {
+      var box = elem.getBoundingClientRect();
+
+      var body = document.body;
+      var docElem = document.documentElement;
+
+      var scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop;
+      var scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft;
+
+      var clientTop = docElem.clientTop || body.clientTop || 0;
+      var clientLeft = docElem.clientLeft || body.clientLeft || 0;
+
+      var top  = box.top +  scrollTop - clientTop;
+      var left = box.left + scrollLeft - clientLeft;
+
+      return { top: Math.round(top), left: Math.round(left) };
+  };
+
+  return function(elCanvas, opts, events){
+    /* PRIVATE VARIABLES */
+
+    // Object Pointers
+    var ctx=null,
+        image=null,
+        theArea=null;
+
+    // Dimensions
+    var minCanvasDims=[100,100],
+        maxCanvasDims=[300,300];
+
+    // Result Image size
+    var resImgSize=200;
+
+    // Result Image type
+    var resImgFormat='image/png';
+
+    // Result Image quality
+    var resImgQuality=null;
+
+    /* PRIVATE FUNCTIONS */
+
+    // Draw Scene
+    function drawScene() {
+      // clear canvas
+      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
+
+      if(image!==null) {
+        // draw source image
+        ctx.drawImage(image, 0, 0, ctx.canvas.width, ctx.canvas.height);
+
+        ctx.save();
+
+        // and make it darker
+        ctx.fillStyle = 'rgba(0, 0, 0, 0.65)';
+        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
+
+        ctx.restore();
+
+        // draw Area
+        theArea.draw();
+      }
+    }
+
+    // Resets CropHost
+    var resetCropHost=function() {
+      if(image!==null) {
+        theArea.setImage(image);
+        var imageDims=[image.width, image.height],
+            imageRatio=image.width/image.height,
+            canvasDims=imageDims;
+
+        if(canvasDims[0]>maxCanvasDims[0]) {
+          canvasDims[0]=maxCanvasDims[0];
+          canvasDims[1]=canvasDims[0]/imageRatio;
+        } else if(canvasDims[0]<minCanvasDims[0]) {
+          canvasDims[0]=minCanvasDims[0];
+          canvasDims[1]=canvasDims[0]/imageRatio;
+        }
+        if(canvasDims[1]>maxCanvasDims[1]) {
+          canvasDims[1]=maxCanvasDims[1];
+          canvasDims[0]=canvasDims[1]*imageRatio;
+        } else if(canvasDims[1]<minCanvasDims[1]) {
+          canvasDims[1]=minCanvasDims[1];
+          canvasDims[0]=canvasDims[1]*imageRatio;
+        }
+        elCanvas.prop('width',canvasDims[0]).prop('height',canvasDims[1]).css({'margin-left': -canvasDims[0]/2+'px', 'margin-top': -canvasDims[1]/2+'px'});
+
+        theArea.setX(ctx.canvas.width/2);
+        theArea.setY(ctx.canvas.height/2);
+        theArea.setSize(Math.min(200, ctx.canvas.width/2, ctx.canvas.height/2));
+      } else {
+        elCanvas.prop('width',0).prop('height',0).css({'margin-top': 0});
+      }
+
+      drawScene();
+    };
+
+    /**
+     * Returns event.changedTouches directly if event is a TouchEvent.
+     * If event is a jQuery event, return changedTouches of event.originalEvent
+     */
+    var getChangedTouches=function(event){
+      if(angular.isDefined(event.changedTouches)){
+        return event.changedTouches;
+      }else{
+        return event.originalEvent.changedTouches;
+      }
+    };
+
+    var onMouseMove=function(e) {
+      if(image!==null) {
+        var offset=getElementOffset(ctx.canvas),
+            pageX, pageY;
+        if(e.type === 'touchmove') {
+          pageX=getChangedTouches(e)[0].pageX;
+          pageY=getChangedTouches(e)[0].pageY;
+        } else {
+          pageX=e.pageX;
+          pageY=e.pageY;
+        }
+        theArea.processMouseMove(pageX-offset.left, pageY-offset.top);
+        drawScene();
+      }
+    };
+
+    var onMouseDown=function(e) {
+      e.preventDefault();
+      e.stopPropagation();
+      if(image!==null) {
+        var offset=getElementOffset(ctx.canvas),
+            pageX, pageY;
+        if(e.type === 'touchstart') {
+          pageX=getChangedTouches(e)[0].pageX;
+          pageY=getChangedTouches(e)[0].pageY;
+        } else {
+          pageX=e.pageX;
+          pageY=e.pageY;
+        }
+        theArea.processMouseDown(pageX-offset.left, pageY-offset.top);
+        drawScene();
+      }
+    };
+
+    var onMouseUp=function(e) {
+      if(image!==null) {
+        var offset=getElementOffset(ctx.canvas),
+            pageX, pageY;
+        if(e.type === 'touchend') {
+          pageX=getChangedTouches(e)[0].pageX;
+          pageY=getChangedTouches(e)[0].pageY;
+        } else {
+          pageX=e.pageX;
+          pageY=e.pageY;
+        }
+        theArea.processMouseUp(pageX-offset.left, pageY-offset.top);
+        drawScene();
+      }
+    };
+
+    this.getResultImageDataURI=function() {
+      var temp_ctx, temp_canvas;
+      temp_canvas = angular.element('<canvas></canvas>')[0];
+      temp_ctx = temp_canvas.getContext('2d');
+      temp_canvas.width = resImgSize;
+      temp_canvas.height = resImgSize;
+      if(image!==null){
+        temp_ctx.drawImage(image, (theArea.getX()-theArea.getSize()/2)*(image.width/ctx.canvas.width), (theArea.getY()-theArea.getSize()/2)*(image.height/ctx.canvas.height), theArea.getSize()*(image.width/ctx.canvas.width), theArea.getSize()*(image.height/ctx.canvas.height), 0, 0, resImgSize, resImgSize);
+      }
+      if (resImgQuality!==null ){
+        return temp_canvas.toDataURL(resImgFormat, resImgQuality);
+      }
+      return temp_canvas.toDataURL(resImgFormat);
+    };
+
+    this.setNewImageSource=function(imageSource) {
+      image=null;
+      resetCropHost();
+      events.trigger('image-updated');
+      if(!!imageSource) {
+        var newImage = new Image();
+        if(imageSource.substring(0,4).toLowerCase()==='http') {
+          newImage.crossOrigin = 'anonymous';
+        }
+        newImage.onload = function(){
+          events.trigger('load-done');
+
+          cropEXIF.getData(newImage,function(){
+            var orientation=cropEXIF.getTag(newImage,'Orientation');
+
+            if([3,6,8].indexOf(orientation)>-1) {
+              var canvas = document.createElement("canvas"),
+                  ctx=canvas.getContext("2d"),
+                  cw = newImage.width, ch = newImage.height, cx = 0, cy = 0, deg=0;
+              switch(orientation) {
+                case 3:
+                  cx=-newImage.width;
+                  cy=-newImage.height;
+                  deg=180;
+                  break;
+                case 6:
+                  cw = newImage.height;
+                  ch = newImage.width;
+                  cy=-newImage.height;
+                  deg=90;
+                  break;
+                case 8:
+                  cw = newImage.height;
+                  ch = newImage.width;
+                  cx=-newImage.width;
+                  deg=270;
+                  break;
+              }
+
+              canvas.width = cw;
+              canvas.height = ch;
+              ctx.rotate(deg*Math.PI/180);
+              ctx.drawImage(newImage, cx, cy);
+
+              image=new Image();
+              image.src = canvas.toDataURL("image/png");
+            } else {
+              image=newImage;
+            }
+            resetCropHost();
+            events.trigger('image-updated');
+          });
+        };
+        newImage.onerror=function() {
+          events.trigger('load-error');
+        };
+        events.trigger('load-start');
+        newImage.src=imageSource;
+      }
+    };
+
+    this.setMaxDimensions=function(width, height) {
+      maxCanvasDims=[width,height];
+
+      if(image!==null) {
+        var curWidth=ctx.canvas.width,
+            curHeight=ctx.canvas.height;
+
+        var imageDims=[image.width, image.height],
+            imageRatio=image.width/image.height,
+            canvasDims=imageDims;
+
+        if(canvasDims[0]>maxCanvasDims[0]) {
+          canvasDims[0]=maxCanvasDims[0];
+          canvasDims[1]=canvasDims[0]/imageRatio;
+        } else if(canvasDims[0]<minCanvasDims[0]) {
+          canvasDims[0]=minCanvasDims[0];
+          canvasDims[1]=canvasDims[0]/imageRatio;
+        }
+        if(canvasDims[1]>maxCanvasDims[1]) {
+          canvasDims[1]=maxCanvasDims[1];
+          canvasDims[0]=canvasDims[1]*imageRatio;
+        } else if(canvasDims[1]<minCanvasDims[1]) {
+          canvasDims[1]=minCanvasDims[1];
+          canvasDims[0]=canvasDims[1]*imageRatio;
+        }
+        elCanvas.prop('width',canvasDims[0]).prop('height',canvasDims[1]).css({'margin-left': -canvasDims[0]/2+'px', 'margin-top': -canvasDims[1]/2+'px'});
+
+        var ratioNewCurWidth=ctx.canvas.width/curWidth,
+            ratioNewCurHeight=ctx.canvas.height/curHeight,
+            ratioMin=Math.min(ratioNewCurWidth, ratioNewCurHeight);
+
+        theArea.setX(theArea.getX()*ratioNewCurWidth);
+        theArea.setY(theArea.getY()*ratioNewCurHeight);
+        theArea.setSize(theArea.getSize()*ratioMin);
+      } else {
+        elCanvas.prop('width',0).prop('height',0).css({'margin-top': 0});
+      }
+
+      drawScene();
+
+    };
+
+    this.setAreaMinSize=function(size) {
+      size=parseInt(size,10);
+      if(!isNaN(size)) {
+        theArea.setMinSize(size);
+        drawScene();
+      }
+    };
+
+    this.setResultImageSize=function(size) {
+      size=parseInt(size,10);
+      if(!isNaN(size)) {
+        resImgSize=size;
+      }
+    };
+
+    this.setResultImageFormat=function(format) {
+      resImgFormat = format;
+    };
+
+    this.setResultImageQuality=function(quality){
+      quality = parseFloat(quality);
+      if (!isNaN(quality) && quality>=0 && quality<=1){
+        resImgQuality = quality;
+      }
+    };
+
+    this.setAreaType=function(type) {
+      var curSize=theArea.getSize(),
+          curMinSize=theArea.getMinSize(),
+          curX=theArea.getX(),
+          curY=theArea.getY();
+
+      var AreaClass=CropAreaCircle;
+      if(type==='square') {
+        AreaClass=CropAreaSquare;
+      }
+      theArea = new AreaClass(ctx, events);
+      theArea.setMinSize(curMinSize);
+      theArea.setSize(curSize);
+      theArea.setX(curX);
+      theArea.setY(curY);
+
+      // resetCropHost();
+      if(image!==null) {
+        theArea.setImage(image);
+      }
+
+      drawScene();
+    };
+
+    /* Life Cycle begins */
+
+    // Init Context var
+    ctx = elCanvas[0].getContext('2d');
+
+    // Init CropArea
+    theArea = new CropAreaCircle(ctx, events);
+
+    // Init Mouse Event Listeners
+    $document.on('mousemove',onMouseMove);
+    elCanvas.on('mousedown',onMouseDown);
+    $document.on('mouseup',onMouseUp);
+
+    // Init Touch Event Listeners
+    $document.on('touchmove',onMouseMove);
+    elCanvas.on('touchstart',onMouseDown);
+    $document.on('touchend',onMouseUp);
+
+    // CropHost Destructor
+    this.destroy=function() {
+      $document.off('mousemove',onMouseMove);
+      elCanvas.off('mousedown',onMouseDown);
+      $document.off('mouseup',onMouseMove);
+
+      $document.off('touchmove',onMouseMove);
+      elCanvas.off('touchstart',onMouseDown);
+      $document.off('touchend',onMouseMove);
+
+      elCanvas.remove();
+    };
+  };
+
+}]);
+
+
+crop.factory('cropPubSub', [function() {
+  return function() {
+    var events = {};
+    // Subscribe
+    this.on = function(names, handler) {
+      names.split(' ').forEach(function(name) {
+        if (!events[name]) {
+          events[name] = [];
+        }
+        events[name].push(handler);
+      });
+      return this;
+    };
+    // Publish
+    this.trigger = function(name, args) {
+      angular.forEach(events[name], function(handler) {
+        handler.call(null, args);
+      });
+      return this;
+    };
+  };
+}]);
+
+crop.directive('imgCrop', ['$timeout', 'cropHost', 'cropPubSub', function($timeout, CropHost, CropPubSub) {
+  return {
+    restrict: 'E',
+    scope: {
+      image: '=',
+      resultImage: '=',
+
+      changeOnFly: '=',
+      areaType: '@',
+      areaMinSize: '=',
+      resultImageSize: '=',
+      resultImageFormat: '@',
+      resultImageQuality: '=',
+
+      onChange: '&',
+      onLoadBegin: '&',
+      onLoadDone: '&',
+      onLoadError: '&'
+    },
+    template: '<canvas></canvas>',
+    controller: ['$scope', function($scope) {
+      $scope.events = new CropPubSub();
+    }],
+    link: function(scope, element/*, attrs*/) {
+      // Init Events Manager
+      var events = scope.events;
+
+      // Init Crop Host
+      var cropHost=new CropHost(element.find('canvas'), {}, events);
+
+      // Store Result Image to check if it's changed
+      var storedResultImage;
+
+      var updateResultImage=function(scope) {
+        var resultImage=cropHost.getResultImageDataURI();
+        if(storedResultImage!==resultImage) {
+          storedResultImage=resultImage;
+          if(angular.isDefined(scope.resultImage)) {
+            scope.resultImage=resultImage;
+          }
+          scope.onChange({$dataURI: scope.resultImage});
+        }
+      };
+
+      // Wrapper to safely exec functions within $apply on a running $digest cycle
+      var fnSafeApply=function(fn) {
+        return function(){
+          $timeout(function(){
+            scope.$apply(function(scope){
+              fn(scope);
+            });
+          });
+        };
+      };
+
+      // Setup CropHost Event Handlers
+      events
+        .on('load-start', fnSafeApply(function(scope){
+          scope.onLoadBegin({});
+        }))
+        .on('load-done', fnSafeApply(function(scope){
+          scope.onLoadDone({});
+        }))
+        .on('load-error', fnSafeApply(function(scope){
+          scope.onLoadError({});
+        }))
+        .on('area-move area-resize', fnSafeApply(function(scope){
+          if(!!scope.changeOnFly) {
+            updateResultImage(scope);
+          }
+        }))
+        .on('area-move-end area-resize-end image-updated', fnSafeApply(function(scope){
+          updateResultImage(scope);
+        }));
+
+      // Sync CropHost with Directive's options
+      scope.$watch('image',function(){
+        cropHost.setNewImageSource(scope.image);
+      });
+      scope.$watch('areaType',function(){
+        cropHost.setAreaType(scope.areaType);
+        updateResultImage(scope);
+      });
+      scope.$watch('areaMinSize',function(){
+        cropHost.setAreaMinSize(scope.areaMinSize);
+        updateResultImage(scope);
+      });
+      scope.$watch('resultImageSize',function(){
+        cropHost.setResultImageSize(scope.resultImageSize);
+        updateResultImage(scope);
+      });
+      scope.$watch('resultImageFormat',function(){
+        cropHost.setResultImageFormat(scope.resultImageFormat);
+        updateResultImage(scope);
+      });
+      scope.$watch('resultImageQuality',function(){
+        cropHost.setResultImageQuality(scope.resultImageQuality);
+        updateResultImage(scope);
+      });
+
+      // Update CropHost dimensions when the directive element is resized
+      scope.$watch(
+        function () {
+          return [element[0].clientWidth, element[0].clientHeight];
+        },
+        function (value) {
+          cropHost.setMaxDimensions(value[0],value[1]);
+          updateResultImage(scope);
+        },
+        true
+      );
+
+      // Destroy CropHost Instance when the directive is destroying
+      scope.$on('$destroy', function(){
+          cropHost.destroy();
+      });
+    }
+  };
+}]);
+}());
\ No newline at end of file
diff --git a/src/main/resources/static/package.json b/src/main/resources/static/package.json
index b109c06..d4a2926 100644
--- a/src/main/resources/static/package.json
+++ b/src/main/resources/static/package.json
@@ -29,6 +29,9 @@
     "gulp-webserver": "^0.9.1",
     "jshint": "^2.9.4",
     "meanie-angular-focus": "^1.5.1",
+    "ng-file-upload": "^12.2.13",
+    "ng-img-crop": "^0.2.0",
+    "ngletteravatar": "^4.0.4",
     "roboto-fontface": "^0.7.0"
   },
   "scripts": {
-- 
2.8.1.windows.1

